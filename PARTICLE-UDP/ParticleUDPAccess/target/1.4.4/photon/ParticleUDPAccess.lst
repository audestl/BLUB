
/Users/se/Documents/PARTICLE-UDP/ParticleUDPAccess/target/1.4.4/photon/ParticleUDPAccess.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001924  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1940  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a1944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006ac  20000074  20000074  00030074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a19b8  080a19b8  000219b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a19e0  080a19e0  000219e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0008d402  00000000  00000000  000219e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ca73  00000000  00000000  000aede6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f96d  00000000  00000000  000bb859  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000019c0  00000000  00000000  000cb1c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002af0  00000000  00000000  000ccb86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020a3e  00000000  00000000  000cf676  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001c0d7  00000000  00000000  000f00b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a3db8  00000000  00000000  0010c18b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a7c8  00000000  00000000  001aff44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fa65 	bl	80a14fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fa6a 	bl	80a1512 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1944 	.word	0x080a1944
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000720 	.word	0x20000720
 80a0058:	20000720 	.word	0x20000720

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f889 	bl	80a1174 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1904 	.word	0x080a1904
 80a0084:	080a1938 	.word	0x080a1938

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b836 	b.w	80a00f8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f873 	bl	80a0178 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b82f 	b.w	80a10f8 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f000 ba7b 	b.w	80a0594 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 ba81 	b.w	80a05a4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4604      	mov	r4, r0
 80a00b8:	4b05      	ldr	r3, [pc, #20]	; (80a00d0 <_ZN3UDPD1Ev+0x1c>)
 80a00ba:	6003      	str	r3, [r0, #0]
 80a00bc:	3364      	adds	r3, #100	; 0x64
 80a00be:	6103      	str	r3, [r0, #16]
 80a00c0:	f000 fc9c 	bl	80a09fc <_ZN3UDP4stopEv>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	f000 fdd1 	bl	80a0c6c <_ZN3UDP13releaseBufferEv>
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	bd10      	pop	{r4, pc}
 80a00ce:	bf00      	nop
 80a00d0:	080a17a4 	.word	0x080a17a4

080a00d4 <_ZN9IPAddressD0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2118      	movs	r1, #24
 80a00da:	f001 f8b6 	bl	80a124a <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN3UDPD0Ev>:
 80a00e2:	b510      	push	{r4, lr}
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	f7ff ffe5 	bl	80a00b4 <_ZN3UDPD1Ev>
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	214c      	movs	r1, #76	; 0x4c
 80a00ee:	f001 f8ac 	bl	80a124a <_ZdlPvj>
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	bd10      	pop	{r4, pc}
	...

080a00f8 <setup>:
// port that THIS device listens on in case it will receive something :)
const int LISTENING_PORT = 8888;
int rxError = 0;


void setup() {
 80a00f8:	b510      	push	{r4, lr}
 80a00fa:	b086      	sub	sp, #24

  Serial.begin(9600);
 80a00fc:	f000 ff08 	bl	80a0f10 <_Z16_fetch_usbserialv>
 80a0100:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0104:	f000 fee4 	bl	80a0ed0 <_ZN9USBSerial5beginEl>
    while(Serial==false);
 80a0108:	f000 ff02 	bl	80a0f10 <_Z16_fetch_usbserialv>
 80a010c:	f000 fee7 	bl	80a0ede <_ZN9USBSerialcvbEv>
 80a0110:	2800      	cmp	r0, #0
 80a0112:	d0f9      	beq.n	80a0108 <setup+0x10>
  Serial.println("test the serial!"); 
 80a0114:	f000 fefc 	bl	80a0f10 <_Z16_fetch_usbserialv>
 80a0118:	4c14      	ldr	r4, [pc, #80]	; (80a016c <setup+0x74>)
 80a011a:	4915      	ldr	r1, [pc, #84]	; (80a0170 <setup+0x78>)
 80a011c:	f000 fb7b 	bl	80a0816 <_ZN5Print7printlnEPKc>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0120:	2300      	movs	r3, #0
 80a0122:	461a      	mov	r2, r3
 80a0124:	4619      	mov	r1, r3
 80a0126:	6860      	ldr	r0, [r4, #4]
 80a0128:	f000 f9e4 	bl	80a04f4 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a012c:	2200      	movs	r2, #0
 80a012e:	4611      	mov	r1, r2
 80a0130:	6860      	ldr	r0, [r4, #4]
 80a0132:	f000 f9f7 	bl	80a0524 <network_ready>
  // have to explicitly connect to wifi
  WiFi.connect();
  while(WiFi.ready()==false);
 80a0136:	2800      	cmp	r0, #0
 80a0138:	d0f8      	beq.n	80a012c <setup+0x34>

 // pinMode(A0, INPUT);
 //start udp to LISTEN on this port
  Udp.begin(LISTENING_PORT);   
 80a013a:	2200      	movs	r2, #0
 80a013c:	f242 21b8 	movw	r1, #8888	; 0x22b8
 80a0140:	480c      	ldr	r0, [pc, #48]	; (80a0174 <setup+0x7c>)
 80a0142:	f000 fc36 	bl	80a09b2 <_ZN3UDP5beginEtm>




  // the local ip of this device
  Serial.println(WiFi.localIP());
 80a0146:	f000 fee3 	bl	80a0f10 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a014a:	4b08      	ldr	r3, [pc, #32]	; (80a016c <setup+0x74>)
 80a014c:	2200      	movs	r2, #0
 80a014e:	4611      	mov	r1, r2
 80a0150:	4604      	mov	r4, r0
 80a0152:	6858      	ldr	r0, [r3, #4]
 80a0154:	f000 f9c6 	bl	80a04e4 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0158:	1c81      	adds	r1, r0, #2
 80a015a:	4668      	mov	r0, sp
 80a015c:	f000 fa66 	bl	80a062c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0160:	4669      	mov	r1, sp
 80a0162:	4620      	mov	r0, r4
 80a0164:	f000 fb61 	bl	80a082a <_ZN5Print7printlnERK9Printable>
}
 80a0168:	b006      	add	sp, #24
 80a016a:	bd10      	pop	{r4, pc}
 80a016c:	20000634 	.word	0x20000634
 80a0170:	080a160c 	.word	0x080a160c
 80a0174:	20000160 	.word	0x20000160

080a0178 <loop>:

void loop() 
{
 80a0178:	b570      	push	{r4, r5, r6, lr}
 80a017a:	b08e      	sub	sp, #56	; 0x38
 // int light = analogRead(A0);

   // lets do some random generation to show changing values... 
  valOne = rand() % 514 + 1;
 80a017c:	f001 f9fa 	bl	80a1574 <rand>
 80a0180:	f240 2302 	movw	r3, #514	; 0x202
 80a0184:	fb90 f2f3 	sdiv	r2, r0, r3
 80a0188:	fb02 0013 	mls	r0, r2, r3, r0
 80a018c:	4c29      	ldr	r4, [pc, #164]	; (80a0234 <loop+0xbc>)
 80a018e:	3001      	adds	r0, #1
 80a0190:	6020      	str	r0, [r4, #0]
  valTwo = rand() % 1023 + 1;
 80a0192:	f001 f9ef 	bl	80a1574 <rand>
 80a0196:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a019a:	fb90 f3f3 	sdiv	r3, r0, r3
 80a019e:	ebc3 2383 	rsb	r3, r3, r3, lsl #10
 80a01a2:	1ac0      	subs	r0, r0, r3
 80a01a4:	4b24      	ldr	r3, [pc, #144]	; (80a0238 <loop+0xc0>)
 80a01a6:	3001      	adds	r0, #1
 80a01a8:	6018      	str	r0, [r3, #0]

Write formatted data to string::
Lets make a nice looking packet :::
//start, name, val1, val2, val3, end//
***/
  sprintf (buffer, "start,%s,%d,%d,%d,end", particleName, valOne, valTwo, valOne+valTwo);
 80a01aa:	6823      	ldr	r3, [r4, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a01ac:	4d23      	ldr	r5, [pc, #140]	; (80a023c <loop+0xc4>)
 80a01ae:	18c2      	adds	r2, r0, r3
 80a01b0:	e88d 0005 	stmia.w	sp, {r0, r2}
 80a01b4:	4922      	ldr	r1, [pc, #136]	; (80a0240 <loop+0xc8>)
 80a01b6:	4a23      	ldr	r2, [pc, #140]	; (80a0244 <loop+0xcc>)
 80a01b8:	4823      	ldr	r0, [pc, #140]	; (80a0248 <loop+0xd0>)
 80a01ba:	ac03      	add	r4, sp, #12
 80a01bc:	f000 f9fa 	bl	80a05b4 <sprintf>
 80a01c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a01c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a01c4:	682b      	ldr	r3, [r5, #0]
 80a01c6:	ae03      	add	r6, sp, #12
 80a01c8:	7023      	strb	r3, [r4, #0]
 80a01ca:	4b20      	ldr	r3, [pc, #128]	; (80a024c <loop+0xd4>)
 80a01cc:	ad09      	add	r5, sp, #36	; 0x24
 80a01ce:	9308      	str	r3, [sp, #32]
 80a01d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a01d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a01d4:	6823      	ldr	r3, [r4, #0]
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a01d6:	2240      	movs	r2, #64	; 0x40
 80a01d8:	702b      	strb	r3, [r5, #0]
 80a01da:	f242 730e 	movw	r3, #9998	; 0x270e
 80a01de:	491a      	ldr	r1, [pc, #104]	; (80a0248 <loop+0xd0>)
 80a01e0:	9300      	str	r3, [sp, #0]
 80a01e2:	481b      	ldr	r0, [pc, #108]	; (80a0250 <loop+0xd8>)
 80a01e4:	ab08      	add	r3, sp, #32
    Udp.sendPacket(buffer, bufferSize, remoteIP, SEND_UDP_PORT);
    delay(P_DELAY);


    // CODE TO RECEIVE .. 
    int count = Udp.receivePacket((byte*)message, 127);
 80a01e6:	4d1b      	ldr	r5, [pc, #108]	; (80a0254 <loop+0xdc>)
 80a01e8:	f000 fc19 	bl	80a0a1e <_ZN3UDP10sendPacketEPKhj9IPAddresst>
  //printf ("[%s] is a string %d chars long\n",buffer,n);
  
  // send the packet to the udp server ... 

    Udp.sendPacket(buffer, bufferSize, remoteIP, SEND_UDP_PORT);
    delay(P_DELAY);
 80a01ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80a01f0:	f000 f9e8 	bl	80a05c4 <delay>


    // CODE TO RECEIVE .. 
    int count = Udp.receivePacket((byte*)message, 127);
 80a01f4:	2300      	movs	r3, #0
 80a01f6:	227f      	movs	r2, #127	; 0x7f
 80a01f8:	4629      	mov	r1, r5
 80a01fa:	4815      	ldr	r0, [pc, #84]	; (80a0250 <loop+0xd8>)
 80a01fc:	f000 fc64 	bl	80a0ac8 <_ZN3UDP13receivePacketEPhjm>
    if (count >= 0 && count < 128) {
 80a0200:	287f      	cmp	r0, #127	; 0x7f
 80a0202:	4c15      	ldr	r4, [pc, #84]	; (80a0258 <loop+0xe0>)
 80a0204:	d803      	bhi.n	80a020e <loop+0x96>
      //Serial.println("got a message");
      //end delimiter ... 
      message[count] = 0;
 80a0206:	2300      	movs	r3, #0
 80a0208:	542b      	strb	r3, [r5, r0]
      rxError = 0;
 80a020a:	6023      	str	r3, [r4, #0]
 80a020c:	e008      	b.n	80a0220 <loop+0xa8>
     } else if (count < -1) {
 80a020e:	1c43      	adds	r3, r0, #1
 80a0210:	da06      	bge.n	80a0220 <loop+0xa8>
     rxError = count;
 80a0212:	6020      	str	r0, [r4, #0]
     // need to re-initialize on error
    Udp.begin(LISTENING_PORT);
 80a0214:	2200      	movs	r2, #0
 80a0216:	f242 21b8 	movw	r1, #8888	; 0x22b8
 80a021a:	480d      	ldr	r0, [pc, #52]	; (80a0250 <loop+0xd8>)
 80a021c:	f000 fbc9 	bl	80a09b2 <_ZN3UDP5beginEtm>
} 
 if (!rxError) {
 80a0220:	6823      	ldr	r3, [r4, #0]
 80a0222:	b923      	cbnz	r3, 80a022e <loop+0xb6>
  Serial.println (message);
 80a0224:	f000 fe74 	bl	80a0f10 <_Z16_fetch_usbserialv>
 80a0228:	490a      	ldr	r1, [pc, #40]	; (80a0254 <loop+0xdc>)
 80a022a:	f000 faf4 	bl	80a0816 <_ZN5Print7printlnEPKc>
}
}
 80a022e:	b00e      	add	sp, #56	; 0x38
 80a0230:	bd70      	pop	{r4, r5, r6, pc}
 80a0232:	bf00      	nop
 80a0234:	20000078 	.word	0x20000078
 80a0238:	200001ac 	.word	0x200001ac
 80a023c:	20000080 	.word	0x20000080
 80a0240:	080a161d 	.word	0x080a161d
 80a0244:	20000000 	.word	0x20000000
 80a0248:	2000011a 	.word	0x2000011a
 80a024c:	080a163c 	.word	0x080a163c
 80a0250:	20000160 	.word	0x20000160
 80a0254:	2000009a 	.word	0x2000009a
 80a0258:	2000015c 	.word	0x2000015c

080a025c <_GLOBAL__sub_I_SystemMode>:
 80a025c:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a025e:	f000 f84d 	bl	80a02fc <HAL_Pin_Map>
 * Description:
 * Author:
 * Date:
 * https://docs.particle.io/reference/device-os/firmware/photon/#udp
 */
SYSTEM_THREAD(ENABLED);
 80a0262:	2100      	movs	r1, #0
 80a0264:	2001      	movs	r0, #1
 80a0266:	f000 f919 	bl	80a049c <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a026a:	4b12      	ldr	r3, [pc, #72]	; (80a02b4 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a026c:	2200      	movs	r2, #0
 80a026e:	701a      	strb	r2, [r3, #0]
 80a0270:	805a      	strh	r2, [r3, #2]
 80a0272:	f64f 72ff 	movw	r2, #65535	; 0xffff
SYSTEM_MODE(MANUAL);

UDP Udp;
 80a0276:	4c10      	ldr	r4, [pc, #64]	; (80a02b8 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0278:	809a      	strh	r2, [r3, #4]
 80a027a:	4d10      	ldr	r5, [pc, #64]	; (80a02bc <_GLOBAL__sub_I_SystemMode+0x60>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a027c:	2003      	movs	r0, #3
 80a027e:	f000 f8fd 	bl	80a047c <set_system_mode>
 80a0282:	4620      	mov	r0, r4
 80a0284:	f000 fcd4 	bl	80a0c30 <_ZN3UDPC1Ev>
 80a0288:	462a      	mov	r2, r5
 80a028a:	490d      	ldr	r1, [pc, #52]	; (80a02c0 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a028c:	4620      	mov	r0, r4

//port of udp server
const int SEND_UDP_PORT = 9998;
// remote ip address (of UDP SERVER)
 IPAddress remoteIP(172,20,10,4);
 80a028e:	4c0d      	ldr	r4, [pc, #52]	; (80a02c4 <_GLOBAL__sub_I_SystemMode+0x68>)
 * https://docs.particle.io/reference/device-os/firmware/photon/#udp
 */
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);

UDP Udp;
 80a0290:	f000 ffd6 	bl	80a1240 <__aeabi_atexit>

//port of udp server
const int SEND_UDP_PORT = 9998;
// remote ip address (of UDP SERVER)
 IPAddress remoteIP(172,20,10,4);
 80a0294:	2304      	movs	r3, #4
 80a0296:	9300      	str	r3, [sp, #0]
 80a0298:	2214      	movs	r2, #20
 80a029a:	230a      	movs	r3, #10
 80a029c:	21ac      	movs	r1, #172	; 0xac
 80a029e:	4620      	mov	r0, r4
 80a02a0:	f000 f9ec 	bl	80a067c <_ZN9IPAddressC1Ehhhh>
 80a02a4:	462a      	mov	r2, r5
 80a02a6:	4620      	mov	r0, r4
 80a02a8:	4907      	ldr	r1, [pc, #28]	; (80a02c8 <_GLOBAL__sub_I_SystemMode+0x6c>)
    Udp.begin(LISTENING_PORT);
} 
 if (!rxError) {
  Serial.println (message);
}
}
 80a02aa:	b003      	add	sp, #12
 80a02ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
UDP Udp;

//port of udp server
const int SEND_UDP_PORT = 9998;
// remote ip address (of UDP SERVER)
 IPAddress remoteIP(172,20,10,4);
 80a02b0:	f000 bfc6 	b.w	80a1240 <__aeabi_atexit>
 80a02b4:	20000094 	.word	0x20000094
 80a02b8:	20000160 	.word	0x20000160
 80a02bc:	20000074 	.word	0x20000074
 80a02c0:	080a00b5 	.word	0x080a00b5
 80a02c4:	2000007c 	.word	0x2000007c
 80a02c8:	080a00b3 	.word	0x080a00b3

080a02cc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b02      	ldr	r3, [pc, #8]	; (80a02d8 <os_mutex_create+0xc>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	bd08      	pop	{r3, pc}
 80a02d8:	080601d0 	.word	0x080601d0

080a02dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <HAL_RNG_GetRandomNumber+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	685b      	ldr	r3, [r3, #4]
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	0806019c 	.word	0x0806019c

080a02ec <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b02      	ldr	r3, [pc, #8]	; (80a02f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	695b      	ldr	r3, [r3, #20]
 80a02f4:	9301      	str	r3, [sp, #4]
 80a02f6:	bd08      	pop	{r3, pc}
 80a02f8:	0806019c 	.word	0x0806019c

080a02fc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b02      	ldr	r3, [pc, #8]	; (80a0308 <HAL_Pin_Map+0xc>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	681b      	ldr	r3, [r3, #0]
 80a0304:	9301      	str	r3, [sp, #4]
 80a0306:	bd08      	pop	{r3, pc}
 80a0308:	080601b0 	.word	0x080601b0

080a030c <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a030c:	b508      	push	{r3, lr}
 80a030e:	4b02      	ldr	r3, [pc, #8]	; (80a0318 <socket_handle_valid+0xc>)
 80a0310:	681b      	ldr	r3, [r3, #0]
 80a0312:	685b      	ldr	r3, [r3, #4]
 80a0314:	9301      	str	r3, [sp, #4]
 80a0316:	bd08      	pop	{r3, pc}
 80a0318:	080601bc 	.word	0x080601bc

080a031c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a031c:	b508      	push	{r3, lr}
 80a031e:	4b02      	ldr	r3, [pc, #8]	; (80a0328 <socket_create+0xc>)
 80a0320:	681b      	ldr	r3, [r3, #0]
 80a0322:	689b      	ldr	r3, [r3, #8]
 80a0324:	9301      	str	r3, [sp, #4]
 80a0326:	bd08      	pop	{r3, pc}
 80a0328:	080601bc 	.word	0x080601bc

080a032c <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a032c:	b508      	push	{r3, lr}
 80a032e:	4b02      	ldr	r3, [pc, #8]	; (80a0338 <socket_receivefrom+0xc>)
 80a0330:	681b      	ldr	r3, [r3, #0]
 80a0332:	695b      	ldr	r3, [r3, #20]
 80a0334:	9301      	str	r3, [sp, #4]
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080601bc 	.word	0x080601bc

080a033c <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b02      	ldr	r3, [pc, #8]	; (80a0348 <socket_sendto+0xc>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	69db      	ldr	r3, [r3, #28]
 80a0344:	9301      	str	r3, [sp, #4]
 80a0346:	bd08      	pop	{r3, pc}
 80a0348:	080601bc 	.word	0x080601bc

080a034c <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a034c:	b508      	push	{r3, lr}
 80a034e:	4b02      	ldr	r3, [pc, #8]	; (80a0358 <socket_close+0xc>)
 80a0350:	681b      	ldr	r3, [r3, #0]
 80a0352:	6a1b      	ldr	r3, [r3, #32]
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	bd08      	pop	{r3, pc}
 80a0358:	080601bc 	.word	0x080601bc

080a035c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <socket_handle_invalid+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601bc 	.word	0x080601bc

080a036c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <HAL_SPI_Init+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	69db      	ldr	r3, [r3, #28]
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601b4 	.word	0x080601b4

080a037c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <HAL_USART_Init+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	699b      	ldr	r3, [r3, #24]
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	080601c4 	.word	0x080601c4

080a038c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <HAL_USART_Write_Data+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	080601c4 	.word	0x080601c4

080a039c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <HAL_USART_Available_Data+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601c4 	.word	0x080601c4

080a03ac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b02      	ldr	r3, [pc, #8]	; (80a03b8 <HAL_USART_Read_Data+0xc>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a03b4:	9301      	str	r3, [sp, #4]
 80a03b6:	bd08      	pop	{r3, pc}
 80a03b8:	080601c4 	.word	0x080601c4

080a03bc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a03bc:	b508      	push	{r3, lr}
 80a03be:	4b02      	ldr	r3, [pc, #8]	; (80a03c8 <HAL_USART_Peek_Data+0xc>)
 80a03c0:	681b      	ldr	r3, [r3, #0]
 80a03c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03c4:	9301      	str	r3, [sp, #4]
 80a03c6:	bd08      	pop	{r3, pc}
 80a03c8:	080601c4 	.word	0x080601c4

080a03cc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <HAL_USART_Flush_Data+0xc>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03d4:	9301      	str	r3, [sp, #4]
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	080601c4 	.word	0x080601c4

080a03dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601c4 	.word	0x080601c4

080a03ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <HAL_USB_USART_Init+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	681b      	ldr	r3, [r3, #0]
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	080601d8 	.word	0x080601d8

080a03fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <HAL_USB_USART_Begin+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	685b      	ldr	r3, [r3, #4]
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	080601d8 	.word	0x080601d8

080a040c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <HAL_USB_USART_Available_Data+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	691b      	ldr	r3, [r3, #16]
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601d8 	.word	0x080601d8

080a041c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	695b      	ldr	r3, [r3, #20]
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601d8 	.word	0x080601d8

080a042c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <HAL_USB_USART_Receive_Data+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	699b      	ldr	r3, [r3, #24]
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601d8 	.word	0x080601d8

080a043c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <HAL_USB_USART_Send_Data+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	69db      	ldr	r3, [r3, #28]
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601d8 	.word	0x080601d8

080a044c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <HAL_USB_USART_Flush_Data+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	6a1b      	ldr	r3, [r3, #32]
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601d8 	.word	0x080601d8

080a045c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <HAL_USB_USART_Is_Enabled+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601d8 	.word	0x080601d8

080a046c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <inet_gethostbyname+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601c0 	.word	0x080601c0

080a047c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <set_system_mode+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	685b      	ldr	r3, [r3, #4]
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601a4 	.word	0x080601a4

080a048c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <system_delay_ms+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	695b      	ldr	r3, [r3, #20]
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601a4 	.word	0x080601a4

080a049c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <system_thread_set_state+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601a4 	.word	0x080601a4

080a04ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b03      	ldr	r3, [pc, #12]	; (80a04bc <system_ctrl_set_app_request_handler+0x10>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a04b6:	9301      	str	r3, [sp, #4]
 80a04b8:	bd08      	pop	{r3, pc}
 80a04ba:	0000      	.short	0x0000
 80a04bc:	080601a4 	.word	0x080601a4

080a04c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b03      	ldr	r3, [pc, #12]	; (80a04d0 <system_ctrl_set_result+0x10>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a04ca:	9301      	str	r3, [sp, #4]
 80a04cc:	bd08      	pop	{r3, pc}
 80a04ce:	0000      	.short	0x0000
 80a04d0:	080601a4 	.word	0x080601a4

080a04d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601cc 	.word	0x080601cc

080a04e4 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <network_config+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	681b      	ldr	r3, [r3, #0]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601c8 	.word	0x080601c8

080a04f4 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <network_connect+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	685b      	ldr	r3, [r3, #4]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601c8 	.word	0x080601c8

080a0504 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <network_connecting+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	689b      	ldr	r3, [r3, #8]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601c8 	.word	0x080601c8

080a0514 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <network_disconnect+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	68db      	ldr	r3, [r3, #12]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601c8 	.word	0x080601c8

080a0524 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <network_ready+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	691b      	ldr	r3, [r3, #16]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601c8 	.word	0x080601c8

080a0534 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <network_on+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	695b      	ldr	r3, [r3, #20]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601c8 	.word	0x080601c8

080a0544 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <network_off+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	699b      	ldr	r3, [r3, #24]
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601c8 	.word	0x080601c8

080a0554 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <network_listen+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	69db      	ldr	r3, [r3, #28]
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601c8 	.word	0x080601c8

080a0564 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <network_listening+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6a1b      	ldr	r3, [r3, #32]
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601c8 	.word	0x080601c8

080a0574 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <network_set_listen_timeout+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601c8 	.word	0x080601c8

080a0584 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <network_get_listen_timeout+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601c8 	.word	0x080601c8

080a0594 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <malloc+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	681b      	ldr	r3, [r3, #0]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601a0 	.word	0x080601a0

080a05a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <free+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	685b      	ldr	r3, [r3, #4]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601a0 	.word	0x080601a0

080a05b4 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <sprintf+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	68db      	ldr	r3, [r3, #12]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601a0 	.word	0x080601a0

080a05c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a05c4:	2100      	movs	r1, #0
 80a05c6:	f7ff bf61 	b.w	80a048c <system_delay_ms>

080a05ca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a05ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a05cc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a05ce:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a05d0:	b113      	cbz	r3, 80a05d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a05d2:	2203      	movs	r2, #3
 80a05d4:	4601      	mov	r1, r0
 80a05d6:	4798      	blx	r3
    }
 80a05d8:	4620      	mov	r0, r4
 80a05da:	bd10      	pop	{r4, pc}

080a05dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a05dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05de:	460f      	mov	r7, r1
 80a05e0:	f100 0608 	add.w	r6, r0, #8
 80a05e4:	1d05      	adds	r5, r0, #4
 80a05e6:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a05ec:	220a      	movs	r2, #10
 80a05ee:	4638      	mov	r0, r7
 80a05f0:	f000 f94f 	bl	80a0892 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a05f4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05f6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a05f8:	d007      	beq.n	80a060a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a05fa:	2c00      	cmp	r4, #0
 80a05fc:	d0f4      	beq.n	80a05e8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a05fe:	212e      	movs	r1, #46	; 0x2e
 80a0600:	4638      	mov	r0, r7
 80a0602:	f000 f8f3 	bl	80a07ec <_ZN5Print5printEc>
 80a0606:	4404      	add	r4, r0
 80a0608:	e7ee      	b.n	80a05e8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a060a:	4620      	mov	r0, r4
 80a060c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0610 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0610:	b510      	push	{r4, lr}
 80a0612:	4604      	mov	r4, r0
 80a0614:	4b04      	ldr	r3, [pc, #16]	; (80a0628 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0616:	2211      	movs	r2, #17
 80a0618:	f840 3b04 	str.w	r3, [r0], #4
 80a061c:	2100      	movs	r1, #0
 80a061e:	f000 ff78 	bl	80a1512 <memset>
{
    clear();
}
 80a0622:	4620      	mov	r0, r4
 80a0624:	bd10      	pop	{r4, pc}
 80a0626:	bf00      	nop
 80a0628:	080a163c 	.word	0x080a163c

080a062c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a062c:	4603      	mov	r3, r0
 80a062e:	4a07      	ldr	r2, [pc, #28]	; (80a064c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0630:	b510      	push	{r4, lr}
 80a0632:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0636:	f101 0210 	add.w	r2, r1, #16
 80a063a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a063e:	4291      	cmp	r1, r2
 80a0640:	f843 4b04 	str.w	r4, [r3], #4
 80a0644:	d1f9      	bne.n	80a063a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0646:	780a      	ldrb	r2, [r1, #0]
 80a0648:	701a      	strb	r2, [r3, #0]
}
 80a064a:	bd10      	pop	{r4, pc}
 80a064c:	080a163c 	.word	0x080a163c

080a0650 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0650:	4a02      	ldr	r2, [pc, #8]	; (80a065c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0652:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0654:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0656:	2204      	movs	r2, #4
 80a0658:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a065a:	4770      	bx	lr
 80a065c:	080a163c 	.word	0x080a163c

080a0660 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0660:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0662:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0666:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a066a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a066e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0672:	2304      	movs	r3, #4
 80a0674:	6041      	str	r1, [r0, #4]
 80a0676:	7503      	strb	r3, [r0, #20]
 80a0678:	bd10      	pop	{r4, pc}
	...

080a067c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a067c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a067e:	4d04      	ldr	r5, [pc, #16]	; (80a0690 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0680:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0682:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0686:	9500      	str	r5, [sp, #0]
 80a0688:	f7ff ffea 	bl	80a0660 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a068c:	b003      	add	sp, #12
 80a068e:	bd30      	pop	{r4, r5, pc}
 80a0690:	080a163c 	.word	0x080a163c

080a0694 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a0694:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0696:	780d      	ldrb	r5, [r1, #0]
 80a0698:	788b      	ldrb	r3, [r1, #2]
 80a069a:	784a      	ldrb	r2, [r1, #1]
 80a069c:	78c9      	ldrb	r1, [r1, #3]
 80a069e:	9100      	str	r1, [sp, #0]
 80a06a0:	4629      	mov	r1, r5
 80a06a2:	f7ff ffdd 	bl	80a0660 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a06a6:	b003      	add	sp, #12
 80a06a8:	bd30      	pop	{r4, r5, pc}
	...

080a06ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a06ac:	4a01      	ldr	r2, [pc, #4]	; (80a06b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a06b0:	601a      	str	r2, [r3, #0]
 80a06b2:	4770      	bx	lr
 80a06b4:	080a16be 	.word	0x080a16be
 80a06b8:	200001b0 	.word	0x200001b0

080a06bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a06bc:	2300      	movs	r3, #0
 80a06be:	461a      	mov	r2, r3
 80a06c0:	6840      	ldr	r0, [r0, #4]
 80a06c2:	f7ff bf17 	b.w	80a04f4 <network_connect>

080a06c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a06c6:	2200      	movs	r2, #0
 80a06c8:	2102      	movs	r1, #2
 80a06ca:	6840      	ldr	r0, [r0, #4]
 80a06cc:	f7ff bf22 	b.w	80a0514 <network_disconnect>

080a06d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a06d0:	2200      	movs	r2, #0
 80a06d2:	4611      	mov	r1, r2
 80a06d4:	6840      	ldr	r0, [r0, #4]
 80a06d6:	f7ff bf15 	b.w	80a0504 <network_connecting>

080a06da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a06da:	2200      	movs	r2, #0
 80a06dc:	4611      	mov	r1, r2
 80a06de:	6840      	ldr	r0, [r0, #4]
 80a06e0:	f7ff bf20 	b.w	80a0524 <network_ready>

080a06e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a06e4:	2300      	movs	r3, #0
 80a06e6:	461a      	mov	r2, r3
 80a06e8:	4619      	mov	r1, r3
 80a06ea:	6840      	ldr	r0, [r0, #4]
 80a06ec:	f7ff bf22 	b.w	80a0534 <network_on>

080a06f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a06f0:	2300      	movs	r3, #0
 80a06f2:	461a      	mov	r2, r3
 80a06f4:	4619      	mov	r1, r3
 80a06f6:	6840      	ldr	r0, [r0, #4]
 80a06f8:	f7ff bf24 	b.w	80a0544 <network_off>

080a06fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a06fc:	2200      	movs	r2, #0
 80a06fe:	f081 0101 	eor.w	r1, r1, #1
 80a0702:	6840      	ldr	r0, [r0, #4]
 80a0704:	f7ff bf26 	b.w	80a0554 <network_listen>

080a0708 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0708:	2200      	movs	r2, #0
 80a070a:	6840      	ldr	r0, [r0, #4]
 80a070c:	f7ff bf32 	b.w	80a0574 <network_set_listen_timeout>

080a0710 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0710:	2200      	movs	r2, #0
 80a0712:	4611      	mov	r1, r2
 80a0714:	6840      	ldr	r0, [r0, #4]
 80a0716:	f7ff bf35 	b.w	80a0584 <network_get_listen_timeout>

080a071a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a071a:	2200      	movs	r2, #0
 80a071c:	4611      	mov	r1, r2
 80a071e:	6840      	ldr	r0, [r0, #4]
 80a0720:	f7ff bf20 	b.w	80a0564 <network_listening>

080a0724 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0724:	b570      	push	{r4, r5, r6, lr}
 80a0726:	4616      	mov	r6, r2
 80a0728:	b08e      	sub	sp, #56	; 0x38
 80a072a:	4604      	mov	r4, r0
    IPAddress addr;
 80a072c:	a808      	add	r0, sp, #32
 80a072e:	f7ff ff6f 	bl	80a0610 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0732:	2211      	movs	r2, #17
 80a0734:	2100      	movs	r1, #0
 80a0736:	a803      	add	r0, sp, #12
 80a0738:	f000 feeb 	bl	80a1512 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a073c:	4630      	mov	r0, r6
 80a073e:	f000 ff53 	bl	80a15e8 <strlen>
 80a0742:	2500      	movs	r5, #0
 80a0744:	4b0a      	ldr	r3, [pc, #40]	; (80a0770 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0746:	9500      	str	r5, [sp, #0]
 80a0748:	b281      	uxth	r1, r0
 80a074a:	685b      	ldr	r3, [r3, #4]
 80a074c:	aa03      	add	r2, sp, #12
 80a074e:	4630      	mov	r0, r6
 80a0750:	f7ff fe8c 	bl	80a046c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0754:	b120      	cbz	r0, 80a0760 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0756:	4629      	mov	r1, r5
 80a0758:	4620      	mov	r0, r4
 80a075a:	f7ff ff79 	bl	80a0650 <_ZN9IPAddressC1Em>
 80a075e:	e003      	b.n	80a0768 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0760:	a903      	add	r1, sp, #12
 80a0762:	4620      	mov	r0, r4
 80a0764:	f7ff ff62 	bl	80a062c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0768:	4620      	mov	r0, r4
 80a076a:	b00e      	add	sp, #56	; 0x38
 80a076c:	bd70      	pop	{r4, r5, r6, pc}
 80a076e:	bf00      	nop
 80a0770:	20000634 	.word	0x20000634

080a0774 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a0774:	4b03      	ldr	r3, [pc, #12]	; (80a0784 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0776:	4a04      	ldr	r2, [pc, #16]	; (80a0788 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0778:	2804      	cmp	r0, #4
 80a077a:	bf0c      	ite	eq
 80a077c:	4610      	moveq	r0, r2
 80a077e:	4618      	movne	r0, r3
 80a0780:	4770      	bx	lr
 80a0782:	bf00      	nop
 80a0784:	200001b4 	.word	0x200001b4
 80a0788:	20000634 	.word	0x20000634

080a078c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a078c:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a078e:	4a03      	ldr	r2, [pc, #12]	; (80a079c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0790:	601a      	str	r2, [r3, #0]
 80a0792:	2200      	movs	r2, #0
 80a0794:	605a      	str	r2, [r3, #4]
 80a0796:	4770      	bx	lr
 80a0798:	200001b4 	.word	0x200001b4
 80a079c:	080a1734 	.word	0x080a1734

080a07a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a07a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07a2:	4606      	mov	r6, r0
 80a07a4:	460d      	mov	r5, r1
 80a07a6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a07a8:	2400      	movs	r4, #0
  while (size--) {
 80a07aa:	42bd      	cmp	r5, r7
 80a07ac:	d00c      	beq.n	80a07c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a07ae:	6833      	ldr	r3, [r6, #0]
 80a07b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a07b4:	689b      	ldr	r3, [r3, #8]
 80a07b6:	4630      	mov	r0, r6
 80a07b8:	4798      	blx	r3
     if (chunk>=0)
 80a07ba:	2800      	cmp	r0, #0
 80a07bc:	db01      	blt.n	80a07c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a07be:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a07c0:	e7f3      	b.n	80a07aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a07c2:	2c00      	cmp	r4, #0
 80a07c4:	bf08      	it	eq
 80a07c6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a07c8:	4620      	mov	r0, r4
 80a07ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a07cc:	b570      	push	{r4, r5, r6, lr}
 80a07ce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a07d0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a07d2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a07d4:	b149      	cbz	r1, 80a07ea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a07d6:	f000 ff07 	bl	80a15e8 <strlen>
 80a07da:	682b      	ldr	r3, [r5, #0]
 80a07dc:	4602      	mov	r2, r0
 80a07de:	4621      	mov	r1, r4
 80a07e0:	4628      	mov	r0, r5
    }
 80a07e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07e6:	68db      	ldr	r3, [r3, #12]
 80a07e8:	4718      	bx	r3
    }
 80a07ea:	bd70      	pop	{r4, r5, r6, pc}

080a07ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07ec:	6803      	ldr	r3, [r0, #0]
 80a07ee:	689b      	ldr	r3, [r3, #8]
 80a07f0:	4718      	bx	r3

080a07f2 <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a07f2:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a07f4:	680a      	ldr	r2, [r1, #0]
 80a07f6:	4601      	mov	r1, r0
 80a07f8:	6812      	ldr	r2, [r2, #0]
 80a07fa:	4618      	mov	r0, r3
 80a07fc:	4710      	bx	r2

080a07fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0800:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0802:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0804:	f7ff fff2 	bl	80a07ec <_ZN5Print5printEc>
  n += print('\n');
 80a0808:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a080a:	4604      	mov	r4, r0
  n += print('\n');
 80a080c:	4628      	mov	r0, r5
 80a080e:	f7ff ffed 	bl	80a07ec <_ZN5Print5printEc>
  return n;
}
 80a0812:	4420      	add	r0, r4
 80a0814:	bd38      	pop	{r3, r4, r5, pc}

080a0816 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0816:	b538      	push	{r3, r4, r5, lr}
 80a0818:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a081a:	f7ff ffd7 	bl	80a07cc <_ZN5Print5writeEPKc>
 80a081e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0820:	4628      	mov	r0, r5
 80a0822:	f7ff ffec 	bl	80a07fe <_ZN5Print7printlnEv>
  return n;
}
 80a0826:	4420      	add	r0, r4
 80a0828:	bd38      	pop	{r3, r4, r5, pc}

080a082a <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a082a:	b538      	push	{r3, r4, r5, lr}
 80a082c:	4605      	mov	r5, r0
   size_t n = print(x);
 80a082e:	f7ff ffe0 	bl	80a07f2 <_ZN5Print5printERK9Printable>
 80a0832:	4604      	mov	r4, r0
   n += println();
 80a0834:	4628      	mov	r0, r5
 80a0836:	f7ff ffe2 	bl	80a07fe <_ZN5Print7printlnEv>
   return n;
 }
 80a083a:	4420      	add	r0, r4
 80a083c:	bd38      	pop	{r3, r4, r5, pc}

080a083e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a083e:	2a01      	cmp	r2, #1
 80a0840:	bf98      	it	ls
 80a0842:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0844:	b530      	push	{r4, r5, lr}
 80a0846:	460b      	mov	r3, r1
 80a0848:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a084a:	2100      	movs	r1, #0
 80a084c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0850:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0854:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0858:	fb05 3312 	mls	r3, r5, r2, r3
 80a085c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a085e:	2b09      	cmp	r3, #9
 80a0860:	bf94      	ite	ls
 80a0862:	3330      	addls	r3, #48	; 0x30
 80a0864:	3337      	addhi	r3, #55	; 0x37
 80a0866:	b2db      	uxtb	r3, r3
 80a0868:	4621      	mov	r1, r4
 80a086a:	f804 3901 	strb.w	r3, [r4], #-1
 80a086e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0870:	2d00      	cmp	r5, #0
 80a0872:	d1ef      	bne.n	80a0854 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0874:	f7ff ffaa 	bl	80a07cc <_ZN5Print5writeEPKc>
}
 80a0878:	b00b      	add	sp, #44	; 0x2c
 80a087a:	bd30      	pop	{r4, r5, pc}

080a087c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a087c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a087e:	b922      	cbnz	r2, 80a088a <_ZN5Print5printEmi+0xe>
 80a0880:	6803      	ldr	r3, [r0, #0]
 80a0882:	b2c9      	uxtb	r1, r1
 80a0884:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0886:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0888:	4718      	bx	r3
  else return printNumber(n, base);
 80a088a:	b2d2      	uxtb	r2, r2
}
 80a088c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a088e:	f7ff bfd6 	b.w	80a083e <_ZN5Print11printNumberEmh>

080a0892 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0892:	f7ff bff3 	b.w	80a087c <_ZN5Print5printEmi>

080a0896 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0896:	b510      	push	{r4, lr}
 80a0898:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a089a:	f7ff fe96 	bl	80a05ca <_ZNSt14_Function_baseD1Ev>
 80a089e:	4620      	mov	r0, r4
 80a08a0:	bd10      	pop	{r4, pc}
	...

080a08a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a08a4:	4803      	ldr	r0, [pc, #12]	; (80a08b4 <_GLOBAL__sub_I_RGB+0x10>)
 80a08a6:	2300      	movs	r3, #0
 80a08a8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a08aa:	4a03      	ldr	r2, [pc, #12]	; (80a08b8 <_GLOBAL__sub_I_RGB+0x14>)
 80a08ac:	4903      	ldr	r1, [pc, #12]	; (80a08bc <_GLOBAL__sub_I_RGB+0x18>)
 80a08ae:	f000 bcc7 	b.w	80a1240 <__aeabi_atexit>
 80a08b2:	bf00      	nop
 80a08b4:	200001bc 	.word	0x200001bc
 80a08b8:	20000074 	.word	0x20000074
 80a08bc:	080a0897 	.word	0x080a0897

080a08c0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a08c0:	4770      	bx	lr

080a08c2 <_ZN8SPIClassD0Ev>:
 80a08c2:	b510      	push	{r4, lr}
 80a08c4:	4604      	mov	r4, r0
 80a08c6:	2110      	movs	r1, #16
 80a08c8:	f000 fcbf 	bl	80a124a <_ZdlPvj>
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	bd10      	pop	{r4, pc}

080a08d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a08d0:	b570      	push	{r4, r5, r6, lr}
 80a08d2:	4604      	mov	r4, r0
 80a08d4:	460e      	mov	r6, r1
 80a08d6:	4b07      	ldr	r3, [pc, #28]	; (80a08f4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a08d8:	2500      	movs	r5, #0
 80a08da:	6003      	str	r3, [r0, #0]
 80a08dc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a08e0:	f7ff fcf4 	bl	80a02cc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a08e4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a08e6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a08e8:	f7ff fd40 	bl	80a036c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a08ec:	60a5      	str	r5, [r4, #8]
}
 80a08ee:	4620      	mov	r0, r4
 80a08f0:	bd70      	pop	{r4, r5, r6, pc}
 80a08f2:	bf00      	nop
 80a08f4:	080a1768 	.word	0x080a1768

080a08f8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a08f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a08fc:	4b03      	ldr	r3, [pc, #12]	; (80a090c <_GLOBAL__sub_I_System+0x14>)
 80a08fe:	2000      	movs	r0, #0
 80a0900:	7018      	strb	r0, [r3, #0]
 80a0902:	8058      	strh	r0, [r3, #2]
 80a0904:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0906:	f7ff bdb9 	b.w	80a047c <set_system_mode>
 80a090a:	bf00      	nop
 80a090c:	200001cc 	.word	0x200001cc

080a0910 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0910:	4b02      	ldr	r3, [pc, #8]	; (80a091c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0912:	681a      	ldr	r2, [r3, #0]
 80a0914:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0916:	601a      	str	r2, [r3, #0]
 80a0918:	4770      	bx	lr
 80a091a:	bf00      	nop
 80a091c:	2000000c 	.word	0x2000000c
 80a0920:	200001d4 	.word	0x200001d4

080a0924 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a0924:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a0926:	6804      	ldr	r4, [r0, #0]
 80a0928:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a092a:	46a4      	mov	ip, r4
    }
 80a092c:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a092e:	4760      	bx	ip

080a0930 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a0930:	6803      	ldr	r3, [r0, #0]
 80a0932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0934:	4718      	bx	r3

080a0936 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a0936:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a0938:	4770      	bx	lr

080a093a <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a093a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a093c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a093e:	1a10      	subs	r0, r2, r0
 80a0940:	4770      	bx	lr

080a0942 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0942:	b513      	push	{r0, r1, r4, lr}
 80a0944:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a0946:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a0948:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a094c:	68d4      	ldr	r4, [r2, #12]
 80a094e:	4619      	mov	r1, r3
 80a0950:	2201      	movs	r2, #1
 80a0952:	47a0      	blx	r4
}
 80a0954:	b002      	add	sp, #8
 80a0956:	bd10      	pop	{r4, pc}

080a0958 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a0958:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a095a:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a095c:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a095e:	691b      	ldr	r3, [r3, #16]
 80a0960:	4798      	blx	r3
 80a0962:	b128      	cbz	r0, 80a0970 <_ZN3UDP4readEv+0x18>
 80a0964:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0966:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0968:	1c59      	adds	r1, r3, #1
 80a096a:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a096c:	5cd0      	ldrb	r0, [r2, r3]
 80a096e:	bd10      	pop	{r4, pc}
 80a0970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a0974:	bd10      	pop	{r4, pc}

080a0976 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a0976:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a0978:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a097a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a097c:	691b      	ldr	r3, [r3, #16]
 80a097e:	4798      	blx	r3
 80a0980:	b118      	cbz	r0, 80a098a <_ZN3UDP4peekEv+0x14>
 80a0982:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0984:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a0986:	5cd0      	ldrb	r0, [r2, r3]
 80a0988:	bd10      	pop	{r4, pc}
 80a098a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a098e:	bd10      	pop	{r4, pc}

080a0990 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a0990:	4770      	bx	lr

080a0992 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a0992:	4603      	mov	r3, r0
 80a0994:	4608      	mov	r0, r1
 80a0996:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a0998:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a099a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a099c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a099e:	6803      	ldr	r3, [r0, #0]
 80a09a0:	1a52      	subs	r2, r2, r1
 80a09a2:	68db      	ldr	r3, [r3, #12]
 80a09a4:	4421      	add	r1, r4
}
 80a09a6:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a09a8:	4718      	bx	r3

080a09aa <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a09aa:	f1a0 0010 	sub.w	r0, r0, #16
 80a09ae:	f7ff bff0 	b.w	80a0992 <_ZNK3UDP7printToER5Print>

080a09b2 <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a09b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a09b4:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a09b6:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a09b8:	460f      	mov	r7, r1
 80a09ba:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a09bc:	f7ff feda 	bl	80a0774 <_ZN5spark12NetworkClass4fromEm>
 80a09c0:	6803      	ldr	r3, [r0, #0]
 80a09c2:	68db      	ldr	r3, [r3, #12]
 80a09c4:	4798      	blx	r3
 80a09c6:	b1b8      	cbz	r0, 80a09f8 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a09c8:	2102      	movs	r1, #2
 80a09ca:	463b      	mov	r3, r7
 80a09cc:	2211      	movs	r2, #17
 80a09ce:	4608      	mov	r0, r1
 80a09d0:	9600      	str	r6, [sp, #0]
 80a09d2:	f7ff fca3 	bl	80a031c <socket_create>
 80a09d6:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a09d8:	f7ff fc98 	bl	80a030c <socket_handle_valid>
 80a09dc:	4604      	mov	r4, r0
 80a09de:	b130      	cbz	r0, 80a09ee <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a09e0:	2300      	movs	r3, #0
 80a09e2:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a09e4:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a09e6:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a09e8:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a09ea:	2001      	movs	r0, #1
 80a09ec:	e004      	b.n	80a09f8 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a09ee:	682b      	ldr	r3, [r5, #0]
 80a09f0:	4628      	mov	r0, r5
 80a09f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a09f4:	4798      	blx	r3
            bound = false;
 80a09f6:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a09f8:	b003      	add	sp, #12
 80a09fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a09fc <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a09fc:	b538      	push	{r3, r4, r5, lr}
 80a09fe:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0a00:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0a02:	f7ff fcab 	bl	80a035c <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a0a06:	4285      	cmp	r5, r0
 80a0a08:	d002      	beq.n	80a0a10 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a0a0a:	6960      	ldr	r0, [r4, #20]
 80a0a0c:	f7ff fc9e 	bl	80a034c <socket_close>
    }
    _sock = socket_handle_invalid();
 80a0a10:	f7ff fca4 	bl	80a035c <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0a14:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a0a16:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0a18:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0a1a:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0a1c:	bd38      	pop	{r3, r4, r5, pc}

080a0a1e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a0a1e:	b530      	push	{r4, r5, lr}
 80a0a20:	b087      	sub	sp, #28
 80a0a22:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a0a26:	2502      	movs	r5, #2
 80a0a28:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a0a2c:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0a30:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0a32:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0a34:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a0a38:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a0a3c:	799c      	ldrb	r4, [r3, #6]
 80a0a3e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0a42:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0a44:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a0a46:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a0a4a:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a0a4e:	2310      	movs	r3, #16
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	ab02      	add	r3, sp, #8
 80a0a54:	9300      	str	r3, [sp, #0]
 80a0a56:	6940      	ldr	r0, [r0, #20]
 80a0a58:	2300      	movs	r3, #0
 80a0a5a:	f7ff fc6f 	bl	80a033c <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a0a5e:	b007      	add	sp, #28
 80a0a60:	bd30      	pop	{r4, r5, pc}

080a0a62 <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0a62:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0a64:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a0a66:	4605      	mov	r5, r0
 80a0a68:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a0a6a:	b113      	cbz	r3, 80a0a72 <_ZN3UDP5writeEPKhj+0x10>
 80a0a6c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a0a6e:	1a24      	subs	r4, r4, r0
 80a0a70:	e000      	b.n	80a0a74 <_ZN3UDP5writeEPKhj+0x12>
 80a0a72:	461c      	mov	r4, r3
 80a0a74:	4294      	cmp	r4, r2
 80a0a76:	bf28      	it	cs
 80a0a78:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a0a7a:	4418      	add	r0, r3
 80a0a7c:	4622      	mov	r2, r4
 80a0a7e:	f000 fd3d 	bl	80a14fc <memcpy>
    _offset += size;
 80a0a82:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0a84:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a0a86:	4423      	add	r3, r4
 80a0a88:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a0a8a:	bd38      	pop	{r3, r4, r5, pc}

080a0a8c <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0a8c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a0a8e:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0a90:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a0a92:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a0a94:	460e      	mov	r6, r1
 80a0a96:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a0a98:	4798      	blx	r3
 80a0a9a:	b188      	cbz	r0, 80a0ac0 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a0a9c:	6823      	ldr	r3, [r4, #0]
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	691b      	ldr	r3, [r3, #16]
 80a0aa2:	4798      	blx	r3
 80a0aa4:	4285      	cmp	r5, r0
 80a0aa6:	bfa8      	it	ge
 80a0aa8:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a0aaa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0aac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0aae:	462a      	mov	r2, r5
 80a0ab0:	4419      	add	r1, r3
 80a0ab2:	4630      	mov	r0, r6
 80a0ab4:	f000 fd22 	bl	80a14fc <memcpy>
      _offset += read;
 80a0ab8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a0aba:	442b      	add	r3, r5
 80a0abc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a0abe:	e001      	b.n	80a0ac4 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a0ac0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a0ac4:	4628      	mov	r0, r5
 80a0ac6:	bd70      	pop	{r4, r5, r6, pc}

080a0ac8 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0aca:	4604      	mov	r4, r0
 80a0acc:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0ace:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a0ad0:	460d      	mov	r5, r1
 80a0ad2:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0ad4:	f7ff fe4e 	bl	80a0774 <_ZN5spark12NetworkClass4fromEm>
 80a0ad8:	6803      	ldr	r3, [r0, #0]
 80a0ada:	68db      	ldr	r3, [r3, #12]
 80a0adc:	4798      	blx	r3
 80a0ade:	b310      	cbz	r0, 80a0b26 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0ae0:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a0ae2:	f7ff fc3b 	bl	80a035c <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a0ae6:	4287      	cmp	r7, r0
 80a0ae8:	d01d      	beq.n	80a0b26 <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a0aea:	b1e5      	cbz	r5, 80a0b26 <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a0aec:	ab08      	add	r3, sp, #32
 80a0aee:	2210      	movs	r2, #16
 80a0af0:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a0af4:	9301      	str	r3, [sp, #4]
 80a0af6:	eb0d 0302 	add.w	r3, sp, r2
 80a0afa:	9300      	str	r3, [sp, #0]
 80a0afc:	4629      	mov	r1, r5
 80a0afe:	2300      	movs	r3, #0
 80a0b00:	4632      	mov	r2, r6
 80a0b02:	6960      	ldr	r0, [r4, #20]
 80a0b04:	f7ff fc12 	bl	80a032c <socket_receivefrom>
        if (ret >= 0)
 80a0b08:	1e05      	subs	r5, r0, #0
 80a0b0a:	db0e      	blt.n	80a0b2a <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0b0c:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a0b10:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0b14:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a0b16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0b1a:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a0b1c:	f104 001c 	add.w	r0, r4, #28
 80a0b20:	f7ff fdb8 	bl	80a0694 <_ZN9IPAddressaSEPKh>
 80a0b24:	e001      	b.n	80a0b2a <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a0b26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a0b2a:	4628      	mov	r0, r5
 80a0b2c:	b009      	add	sp, #36	; 0x24
 80a0b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0b30 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b34:	4606      	mov	r6, r0
 80a0b36:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a0b38:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a0b3a:	460d      	mov	r5, r1
 80a0b3c:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a0b3e:	f7ff fe19 	bl	80a0774 <_ZN5spark12NetworkClass4fromEm>
 80a0b42:	6803      	ldr	r3, [r0, #0]
 80a0b44:	68db      	ldr	r3, [r3, #12]
 80a0b46:	4798      	blx	r3
 80a0b48:	b1f8      	cbz	r0, 80a0b8a <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a0b4a:	4628      	mov	r0, r5
 80a0b4c:	f000 fd4c 	bl	80a15e8 <strlen>
 80a0b50:	2400      	movs	r4, #0
 80a0b52:	b281      	uxth	r1, r0
 80a0b54:	9400      	str	r4, [sp, #0]
 80a0b56:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a0b58:	aa03      	add	r2, sp, #12
 80a0b5a:	4628      	mov	r0, r5
 80a0b5c:	f7ff fc86 	bl	80a046c <inet_gethostbyname>
 80a0b60:	b990      	cbnz	r0, 80a0b88 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a0b62:	a903      	add	r1, sp, #12
 80a0b64:	a808      	add	r0, sp, #32
 80a0b66:	f7ff fd61 	bl	80a062c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a0b6a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0b6c:	ac0f      	add	r4, sp, #60	; 0x3c
 80a0b6e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a0b70:	4b07      	ldr	r3, [pc, #28]	; (80a0b90 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a0b72:	ad09      	add	r5, sp, #36	; 0x24
 80a0b74:	930e      	str	r3, [sp, #56]	; 0x38
 80a0b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0b7a:	682b      	ldr	r3, [r5, #0]
 80a0b7c:	4642      	mov	r2, r8
 80a0b7e:	7023      	strb	r3, [r4, #0]
 80a0b80:	a90e      	add	r1, sp, #56	; 0x38
 80a0b82:	4630      	mov	r0, r6
 80a0b84:	47b8      	blx	r7
 80a0b86:	e000      	b.n	80a0b8a <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a0b88:	4620      	mov	r0, r4
}
 80a0b8a:	b014      	add	sp, #80	; 0x50
 80a0b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0b90:	080a163c 	.word	0x080a163c

080a0b94 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a0b94:	b570      	push	{r4, r5, r6, lr}
 80a0b96:	4604      	mov	r4, r0
 80a0b98:	4606      	mov	r6, r0
 80a0b9a:	4b05      	ldr	r3, [pc, #20]	; (80a0bb0 <_ZN3UDP8remoteIPEv+0x1c>)
 80a0b9c:	f101 0520 	add.w	r5, r1, #32
 80a0ba0:	f844 3b04 	str.w	r3, [r4], #4
 80a0ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0ba8:	682b      	ldr	r3, [r5, #0]
 80a0baa:	4630      	mov	r0, r6
 80a0bac:	7023      	strb	r3, [r4, #0]
 80a0bae:	bd70      	pop	{r4, r5, r6, pc}
 80a0bb0:	080a163c 	.word	0x080a163c

080a0bb4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0bb6:	4694      	mov	ip, r2
 80a0bb8:	468e      	mov	lr, r1
 80a0bba:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0bbc:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a0bbe:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a0bc0:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a0bc2:	4a09      	ldr	r2, [pc, #36]	; (80a0be8 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a0bc4:	ac03      	add	r4, sp, #12
 80a0bc6:	1d1d      	adds	r5, r3, #4
 80a0bc8:	9202      	str	r2, [sp, #8]
 80a0bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0bce:	682b      	ldr	r3, [r5, #0]
 80a0bd0:	4662      	mov	r2, ip
 80a0bd2:	7023      	strb	r3, [r4, #0]
 80a0bd4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a0bd8:	4671      	mov	r1, lr
 80a0bda:	9300      	str	r3, [sp, #0]
 80a0bdc:	4630      	mov	r0, r6
 80a0bde:	ab02      	add	r3, sp, #8
 80a0be0:	47b8      	blx	r7
    }
 80a0be2:	b009      	add	sp, #36	; 0x24
 80a0be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0be6:	bf00      	nop
 80a0be8:	080a163c 	.word	0x080a163c

080a0bec <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0bee:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0bf0:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a0bf2:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a0bf4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a0bf6:	4b0d      	ldr	r3, [pc, #52]	; (80a0c2c <_ZN3UDP9endPacketEv+0x40>)
 80a0bf8:	ad03      	add	r5, sp, #12
 80a0bfa:	f100 0620 	add.w	r6, r0, #32
 80a0bfe:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a0c02:	9302      	str	r3, [sp, #8]
 80a0c04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0c08:	6833      	ldr	r3, [r6, #0]
 80a0c0a:	4672      	mov	r2, lr
 80a0c0c:	702b      	strb	r3, [r5, #0]
 80a0c0e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a0c10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a0c12:	9300      	str	r3, [sp, #0]
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	ab02      	add	r3, sp, #8
 80a0c18:	47b8      	blx	r7
 80a0c1a:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a0c1c:	6823      	ldr	r3, [r4, #0]
 80a0c1e:	4620      	mov	r0, r4
 80a0c20:	69db      	ldr	r3, [r3, #28]
 80a0c22:	4798      	blx	r3
    return result;
}
 80a0c24:	4628      	mov	r0, r5
 80a0c26:	b009      	add	sp, #36	; 0x24
 80a0c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c2a:	bf00      	nop
 80a0c2c:	080a163c 	.word	0x080a163c

080a0c30 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a0c30:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c36:	6083      	str	r3, [r0, #8]
 80a0c38:	4b0b      	ldr	r3, [pc, #44]	; (80a0c68 <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0c3a:	2500      	movs	r5, #0
 80a0c3c:	f103 0208 	add.w	r2, r3, #8
 80a0c40:	336c      	adds	r3, #108	; 0x6c
 80a0c42:	6002      	str	r2, [r0, #0]
 80a0c44:	6103      	str	r3, [r0, #16]
 80a0c46:	6045      	str	r5, [r0, #4]
 80a0c48:	4604      	mov	r4, r0
 80a0c4a:	f7ff fb87 	bl	80a035c <socket_handle_invalid>
 80a0c4e:	6160      	str	r0, [r4, #20]
 80a0c50:	f104 001c 	add.w	r0, r4, #28
 80a0c54:	f7ff fcdc 	bl	80a0610 <_ZN9IPAddressC1Ev>
 80a0c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a0c5c:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a0c5e:	8725      	strh	r5, [r4, #56]	; 0x38
 80a0c60:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a0c62:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a0c64:	4620      	mov	r0, r4
 80a0c66:	bd38      	pop	{r3, r4, r5, pc}
 80a0c68:	080a179c 	.word	0x080a179c

080a0c6c <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a0c6c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a0c6e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a0c72:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a0c74:	b123      	cbz	r3, 80a0c80 <_ZN3UDP13releaseBufferEv+0x14>
 80a0c76:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a0c78:	b110      	cbz	r0, 80a0c80 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a0c7a:	2101      	movs	r1, #1
 80a0c7c:	f000 fae5 	bl	80a124a <_ZdlPvj>
    }
    _buffer = NULL;
 80a0c80:	2300      	movs	r3, #0
 80a0c82:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a0c84:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a0c88:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0c8a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0c8c:	8723      	strh	r3, [r4, #56]	; 0x38
 80a0c8e:	bd10      	pop	{r4, pc}

080a0c90 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a0c90:	b570      	push	{r4, r5, r6, lr}
 80a0c92:	4604      	mov	r4, r0
 80a0c94:	4616      	mov	r6, r2
 80a0c96:	460d      	mov	r5, r1
    releaseBuffer();
 80a0c98:	f7ff ffe8 	bl	80a0c6c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a0c9c:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a0c9e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a0ca0:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a0ca2:	b93e      	cbnz	r6, 80a0cb4 <_ZN3UDP9setBufferEjPh+0x24>
 80a0ca4:	b135      	cbz	r5, 80a0cb4 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a0ca6:	4628      	mov	r0, r5
 80a0ca8:	f7ff f9f7 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a0cac:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a0cae:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a0cb0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a0cb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a0cb6:	b103      	cbz	r3, 80a0cba <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a0cb8:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a0cba:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a0cbc:	3000      	adds	r0, #0
 80a0cbe:	bf18      	it	ne
 80a0cc0:	2001      	movne	r0, #1
 80a0cc2:	bd70      	pop	{r4, r5, r6, pc}

080a0cc4 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a0cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cc6:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a0cc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a0cca:	4605      	mov	r5, r0
 80a0ccc:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a0cce:	b91a      	cbnz	r2, 80a0cd8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a0cd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a0cd2:	b109      	cbz	r1, 80a0cd8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a0cd4:	f7ff ffdc 	bl	80a0c90 <_ZN3UDP9setBufferEjPh>
 80a0cd8:	f105 0620 	add.w	r6, r5, #32
 80a0cdc:	3404      	adds	r4, #4
 80a0cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0ce0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0ce2:	6823      	ldr	r3, [r4, #0]
 80a0ce4:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0ce6:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a0ce8:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0cea:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a0cec:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a0cee:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a0cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cf2 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a0cf2:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a0cf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a0cf6:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a0cf8:	b91a      	cbnz	r2, 80a0d02 <_ZN3UDP11parsePacketEm+0x10>
 80a0cfa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a0cfc:	b109      	cbz	r1, 80a0d02 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a0cfe:	f7ff ffc7 	bl	80a0c90 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a0d02:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a0d04:	2300      	movs	r3, #0
 80a0d06:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a0d08:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a0d0a:	b141      	cbz	r1, 80a0d1e <_ZN3UDP11parsePacketEm+0x2c>
 80a0d0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a0d0e:	b132      	cbz	r2, 80a0d1e <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a0d10:	6820      	ldr	r0, [r4, #0]
 80a0d12:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	47a8      	blx	r5
        if (result>0) {
 80a0d18:	2800      	cmp	r0, #0
            _total = result;
 80a0d1a:	bfc8      	it	gt
 80a0d1c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a0d1e:	6823      	ldr	r3, [r4, #0]
 80a0d20:	4620      	mov	r0, r4
}
 80a0d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a0d26:	691b      	ldr	r3, [r3, #16]
 80a0d28:	4718      	bx	r3

080a0d2a <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0d2a:	4770      	bx	lr

080a0d2c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0d2c:	7441      	strb	r1, [r0, #17]
 80a0d2e:	4770      	bx	lr

080a0d30 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0d30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0d32:	7c00      	ldrb	r0, [r0, #16]
 80a0d34:	f7ff fb52 	bl	80a03dc <HAL_USART_Available_Data_For_Write>
}
 80a0d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d3c:	bd08      	pop	{r3, pc}

080a0d3e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0d3e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0d40:	7c00      	ldrb	r0, [r0, #16]
 80a0d42:	f7ff fb2b 	bl	80a039c <HAL_USART_Available_Data>
}
 80a0d46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d4a:	bd08      	pop	{r3, pc}

080a0d4c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0d4c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0d4e:	7c00      	ldrb	r0, [r0, #16]
 80a0d50:	f7ff fb34 	bl	80a03bc <HAL_USART_Peek_Data>
}
 80a0d54:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0d58:	bf28      	it	cs
 80a0d5a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0d5e:	bd08      	pop	{r3, pc}

080a0d60 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0d60:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0d62:	7c00      	ldrb	r0, [r0, #16]
 80a0d64:	f7ff fb22 	bl	80a03ac <HAL_USART_Read_Data>
}
 80a0d68:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0d6c:	bf28      	it	cs
 80a0d6e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0d72:	bd08      	pop	{r3, pc}

080a0d74 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0d74:	7c00      	ldrb	r0, [r0, #16]
 80a0d76:	f7ff bb29 	b.w	80a03cc <HAL_USART_Flush_Data>

080a0d7a <_ZN11USARTSerialD0Ev>:
 80a0d7a:	b510      	push	{r4, lr}
 80a0d7c:	4604      	mov	r4, r0
 80a0d7e:	2114      	movs	r1, #20
 80a0d80:	f000 fa63 	bl	80a124a <_ZdlPvj>
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	bd10      	pop	{r4, pc}

080a0d88 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0d88:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0d8a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0d8c:	4604      	mov	r4, r0
 80a0d8e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0d90:	b925      	cbnz	r5, 80a0d9c <_ZN11USARTSerial5writeEh+0x14>
 80a0d92:	7c00      	ldrb	r0, [r0, #16]
 80a0d94:	f7ff fb22 	bl	80a03dc <HAL_USART_Available_Data_For_Write>
 80a0d98:	2800      	cmp	r0, #0
 80a0d9a:	dd05      	ble.n	80a0da8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0d9c:	4631      	mov	r1, r6
 80a0d9e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0da4:	f7ff baf2 	b.w	80a038c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0da8:	4628      	mov	r0, r5
 80a0daa:	bd70      	pop	{r4, r5, r6, pc}

080a0dac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0dac:	b510      	push	{r4, lr}
 80a0dae:	4604      	mov	r4, r0
 80a0db0:	4608      	mov	r0, r1
 80a0db2:	4611      	mov	r1, r2
 80a0db4:	2200      	movs	r2, #0
 80a0db6:	6062      	str	r2, [r4, #4]
 80a0db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0dbc:	60a2      	str	r2, [r4, #8]
 80a0dbe:	4a05      	ldr	r2, [pc, #20]	; (80a0dd4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0dc0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0dc2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0dc4:	2201      	movs	r2, #1
 80a0dc6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0dc8:	461a      	mov	r2, r3
 80a0dca:	f7ff fad7 	bl	80a037c <HAL_USART_Init>
}
 80a0dce:	4620      	mov	r0, r4
 80a0dd0:	bd10      	pop	{r4, pc}
 80a0dd2:	bf00      	nop
 80a0dd4:	080a1814 	.word	0x080a1814

080a0dd8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0dd8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0dda:	4d0c      	ldr	r5, [pc, #48]	; (80a0e0c <_Z22__fetch_global_Serial1v+0x34>)
 80a0ddc:	6829      	ldr	r1, [r5, #0]
 80a0dde:	f011 0401 	ands.w	r4, r1, #1
 80a0de2:	d111      	bne.n	80a0e08 <_Z22__fetch_global_Serial1v+0x30>
 80a0de4:	4628      	mov	r0, r5
 80a0de6:	f7ff f95c 	bl	80a00a2 <__cxa_guard_acquire>
 80a0dea:	b168      	cbz	r0, 80a0e08 <_Z22__fetch_global_Serial1v+0x30>
 80a0dec:	4a08      	ldr	r2, [pc, #32]	; (80a0e10 <_Z22__fetch_global_Serial1v+0x38>)
 80a0dee:	4621      	mov	r1, r4
 80a0df0:	4b08      	ldr	r3, [pc, #32]	; (80a0e14 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0df2:	4809      	ldr	r0, [pc, #36]	; (80a0e18 <_Z22__fetch_global_Serial1v+0x40>)
 80a0df4:	f7ff ffda 	bl	80a0dac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0df8:	4628      	mov	r0, r5
 80a0dfa:	f7ff f957 	bl	80a00ac <__cxa_guard_release>
 80a0dfe:	4a07      	ldr	r2, [pc, #28]	; (80a0e1c <_Z22__fetch_global_Serial1v+0x44>)
 80a0e00:	4907      	ldr	r1, [pc, #28]	; (80a0e20 <_Z22__fetch_global_Serial1v+0x48>)
 80a0e02:	4805      	ldr	r0, [pc, #20]	; (80a0e18 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e04:	f000 fa1c 	bl	80a1240 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0e08:	4803      	ldr	r0, [pc, #12]	; (80a0e18 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e0a:	bd38      	pop	{r3, r4, r5, pc}
 80a0e0c:	20000270 	.word	0x20000270
 80a0e10:	20000274 	.word	0x20000274
 80a0e14:	200001ec 	.word	0x200001ec
 80a0e18:	200001d8 	.word	0x200001d8
 80a0e1c:	20000074 	.word	0x20000074
 80a0e20:	080a0d2b 	.word	0x080a0d2b

080a0e24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0e24:	7441      	strb	r1, [r0, #17]
 80a0e26:	4770      	bx	lr

080a0e28 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0e28:	4770      	bx	lr

080a0e2a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0e2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0e2c:	2100      	movs	r1, #0
 80a0e2e:	7c00      	ldrb	r0, [r0, #16]
 80a0e30:	f7ff fafc 	bl	80a042c <HAL_USB_USART_Receive_Data>
}
 80a0e34:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0e38:	bf28      	it	cs
 80a0e3a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0e3e:	bd08      	pop	{r3, pc}

080a0e40 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0e40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0e42:	2101      	movs	r1, #1
 80a0e44:	7c00      	ldrb	r0, [r0, #16]
 80a0e46:	f7ff faf1 	bl	80a042c <HAL_USB_USART_Receive_Data>
}
 80a0e4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0e4e:	bf28      	it	cs
 80a0e50:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0e54:	bd08      	pop	{r3, pc}

080a0e56 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0e56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0e58:	7c00      	ldrb	r0, [r0, #16]
 80a0e5a:	f7ff fadf 	bl	80a041c <HAL_USB_USART_Available_Data_For_Write>
}
 80a0e5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e62:	bd08      	pop	{r3, pc}

080a0e64 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0e64:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0e66:	7c00      	ldrb	r0, [r0, #16]
 80a0e68:	f7ff fad0 	bl	80a040c <HAL_USB_USART_Available_Data>
}
 80a0e6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e70:	bd08      	pop	{r3, pc}

080a0e72 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0e72:	7c00      	ldrb	r0, [r0, #16]
 80a0e74:	f7ff baea 	b.w	80a044c <HAL_USB_USART_Flush_Data>

080a0e78 <_ZN9USBSerialD0Ev>:
 80a0e78:	b510      	push	{r4, lr}
 80a0e7a:	4604      	mov	r4, r0
 80a0e7c:	2114      	movs	r1, #20
 80a0e7e:	f000 f9e4 	bl	80a124a <_ZdlPvj>
 80a0e82:	4620      	mov	r0, r4
 80a0e84:	bd10      	pop	{r4, pc}

080a0e86 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0e86:	b538      	push	{r3, r4, r5, lr}
 80a0e88:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e8a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0e8c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e8e:	f7ff fac5 	bl	80a041c <HAL_USB_USART_Available_Data_For_Write>
 80a0e92:	2800      	cmp	r0, #0
 80a0e94:	dc01      	bgt.n	80a0e9a <_ZN9USBSerial5writeEh+0x14>
 80a0e96:	7c60      	ldrb	r0, [r4, #17]
 80a0e98:	b128      	cbz	r0, 80a0ea6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0e9a:	4629      	mov	r1, r5
 80a0e9c:	7c20      	ldrb	r0, [r4, #16]
 80a0e9e:	f7ff facd 	bl	80a043c <HAL_USB_USART_Send_Data>
 80a0ea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0ea6:	bd38      	pop	{r3, r4, r5, pc}

080a0ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0ea8:	b510      	push	{r4, lr}
 80a0eaa:	4604      	mov	r4, r0
 80a0eac:	2300      	movs	r3, #0
 80a0eae:	6063      	str	r3, [r4, #4]
 80a0eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0eb4:	60a3      	str	r3, [r4, #8]
 80a0eb6:	4b05      	ldr	r3, [pc, #20]	; (80a0ecc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0eb8:	4608      	mov	r0, r1
 80a0eba:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0ebc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0ebe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0ec0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0ec2:	4611      	mov	r1, r2
 80a0ec4:	f7ff fa92 	bl	80a03ec <HAL_USB_USART_Init>
}
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	bd10      	pop	{r4, pc}
 80a0ecc:	080a1844 	.word	0x080a1844

080a0ed0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0ed0:	2200      	movs	r2, #0
 80a0ed2:	7c00      	ldrb	r0, [r0, #16]
 80a0ed4:	f7ff ba92 	b.w	80a03fc <HAL_USB_USART_Begin>

080a0ed8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a0ed8:	7c00      	ldrb	r0, [r0, #16]
 80a0eda:	f7ff babf 	b.w	80a045c <HAL_USB_USART_Is_Enabled>

080a0ede <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a0ede:	f7ff bffb 	b.w	80a0ed8 <_ZN9USBSerial9isEnabledEv>
	...

080a0ee4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0ee4:	b510      	push	{r4, lr}
 80a0ee6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ee8:	2214      	movs	r2, #20
 80a0eea:	2100      	movs	r1, #0
 80a0eec:	f000 fb11 	bl	80a1512 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ef0:	4b05      	ldr	r3, [pc, #20]	; (80a0f08 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0ef2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ef4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0ef6:	4b05      	ldr	r3, [pc, #20]	; (80a0f0c <_Z19acquireSerialBufferv+0x28>)
 80a0ef8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0efa:	f240 1301 	movw	r3, #257	; 0x101
 80a0efe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f00:	2381      	movs	r3, #129	; 0x81
 80a0f02:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0f04:	bd10      	pop	{r4, pc}
 80a0f06:	bf00      	nop
 80a0f08:	2000037d 	.word	0x2000037d
 80a0f0c:	200002fc 	.word	0x200002fc

080a0f10 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0f10:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0f12:	4d0e      	ldr	r5, [pc, #56]	; (80a0f4c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0f14:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0f16:	a801      	add	r0, sp, #4
 80a0f18:	f7ff ffe4 	bl	80a0ee4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0f1c:	6829      	ldr	r1, [r5, #0]
 80a0f1e:	f011 0401 	ands.w	r4, r1, #1
 80a0f22:	d110      	bne.n	80a0f46 <_Z16_fetch_usbserialv+0x36>
 80a0f24:	4628      	mov	r0, r5
 80a0f26:	f7ff f8bc 	bl	80a00a2 <__cxa_guard_acquire>
 80a0f2a:	b160      	cbz	r0, 80a0f46 <_Z16_fetch_usbserialv+0x36>
 80a0f2c:	aa01      	add	r2, sp, #4
 80a0f2e:	4621      	mov	r1, r4
 80a0f30:	4807      	ldr	r0, [pc, #28]	; (80a0f50 <_Z16_fetch_usbserialv+0x40>)
 80a0f32:	f7ff ffb9 	bl	80a0ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0f36:	4628      	mov	r0, r5
 80a0f38:	f7ff f8b8 	bl	80a00ac <__cxa_guard_release>
 80a0f3c:	4a05      	ldr	r2, [pc, #20]	; (80a0f54 <_Z16_fetch_usbserialv+0x44>)
 80a0f3e:	4906      	ldr	r1, [pc, #24]	; (80a0f58 <_Z16_fetch_usbserialv+0x48>)
 80a0f40:	4803      	ldr	r0, [pc, #12]	; (80a0f50 <_Z16_fetch_usbserialv+0x40>)
 80a0f42:	f000 f97d 	bl	80a1240 <__aeabi_atexit>
	return _usbserial;
}
 80a0f46:	4802      	ldr	r0, [pc, #8]	; (80a0f50 <_Z16_fetch_usbserialv+0x40>)
 80a0f48:	b007      	add	sp, #28
 80a0f4a:	bd30      	pop	{r4, r5, pc}
 80a0f4c:	200002f8 	.word	0x200002f8
 80a0f50:	20000480 	.word	0x20000480
 80a0f54:	20000074 	.word	0x20000074
 80a0f58:	080a0e29 	.word	0x080a0e29

080a0f5c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0f5c:	b510      	push	{r4, lr}
 80a0f5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0f60:	2214      	movs	r2, #20
 80a0f62:	2100      	movs	r1, #0
 80a0f64:	f000 fad5 	bl	80a1512 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f68:	4b05      	ldr	r3, [pc, #20]	; (80a0f80 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0f6a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0f6e:	4b05      	ldr	r3, [pc, #20]	; (80a0f84 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0f70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0f72:	f240 1301 	movw	r3, #257	; 0x101
 80a0f76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f78:	2381      	movs	r3, #129	; 0x81
 80a0f7a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0f7c:	bd10      	pop	{r4, pc}
 80a0f7e:	bf00      	nop
 80a0f80:	20000530 	.word	0x20000530
 80a0f84:	20000498 	.word	0x20000498

080a0f88 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0f88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f8a:	4c0e      	ldr	r4, [pc, #56]	; (80a0fc4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0f8c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0f8e:	a801      	add	r0, sp, #4
 80a0f90:	f7ff ffe4 	bl	80a0f5c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f94:	6823      	ldr	r3, [r4, #0]
 80a0f96:	07db      	lsls	r3, r3, #31
 80a0f98:	d410      	bmi.n	80a0fbc <_Z17_fetch_usbserial1v+0x34>
 80a0f9a:	4620      	mov	r0, r4
 80a0f9c:	f7ff f881 	bl	80a00a2 <__cxa_guard_acquire>
 80a0fa0:	b160      	cbz	r0, 80a0fbc <_Z17_fetch_usbserial1v+0x34>
 80a0fa2:	aa01      	add	r2, sp, #4
 80a0fa4:	2101      	movs	r1, #1
 80a0fa6:	4808      	ldr	r0, [pc, #32]	; (80a0fc8 <_Z17_fetch_usbserial1v+0x40>)
 80a0fa8:	f7ff ff7e 	bl	80a0ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0fac:	4620      	mov	r0, r4
 80a0fae:	f7ff f87d 	bl	80a00ac <__cxa_guard_release>
 80a0fb2:	4a06      	ldr	r2, [pc, #24]	; (80a0fcc <_Z17_fetch_usbserial1v+0x44>)
 80a0fb4:	4906      	ldr	r1, [pc, #24]	; (80a0fd0 <_Z17_fetch_usbserial1v+0x48>)
 80a0fb6:	4804      	ldr	r0, [pc, #16]	; (80a0fc8 <_Z17_fetch_usbserial1v+0x40>)
 80a0fb8:	f000 f942 	bl	80a1240 <__aeabi_atexit>
  return _usbserial1;
}
 80a0fbc:	4802      	ldr	r0, [pc, #8]	; (80a0fc8 <_Z17_fetch_usbserial1v+0x40>)
 80a0fbe:	b006      	add	sp, #24
 80a0fc0:	bd10      	pop	{r4, pc}
 80a0fc2:	bf00      	nop
 80a0fc4:	20000494 	.word	0x20000494
 80a0fc8:	2000051c 	.word	0x2000051c
 80a0fcc:	20000074 	.word	0x20000074
 80a0fd0:	080a0e29 	.word	0x080a0e29

080a0fd4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0fd4:	2200      	movs	r2, #0
 80a0fd6:	4611      	mov	r1, r2
 80a0fd8:	6840      	ldr	r0, [r0, #4]
 80a0fda:	f7ff baa3 	b.w	80a0524 <network_ready>

080a0fde <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0fe0:	4616      	mov	r6, r2
 80a0fe2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0fe4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0fe6:	460f      	mov	r7, r1
 80a0fe8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0fea:	2100      	movs	r1, #0
 80a0fec:	a803      	add	r0, sp, #12
 80a0fee:	f000 fa90 	bl	80a1512 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ff2:	4630      	mov	r0, r6
 80a0ff4:	f000 faf8 	bl	80a15e8 <strlen>
 80a0ff8:	2500      	movs	r5, #0
 80a0ffa:	9500      	str	r5, [sp, #0]
 80a0ffc:	b281      	uxth	r1, r0
 80a0ffe:	687b      	ldr	r3, [r7, #4]
 80a1000:	aa03      	add	r2, sp, #12
 80a1002:	4630      	mov	r0, r6
 80a1004:	f7ff fa32 	bl	80a046c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1008:	b120      	cbz	r0, 80a1014 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a100a:	4629      	mov	r1, r5
 80a100c:	4620      	mov	r0, r4
 80a100e:	f7ff fb1f 	bl	80a0650 <_ZN9IPAddressC1Em>
 80a1012:	e003      	b.n	80a101c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1014:	a903      	add	r1, sp, #12
 80a1016:	4620      	mov	r0, r4
 80a1018:	f7ff fb08 	bl	80a062c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a101c:	4620      	mov	r0, r4
 80a101e:	b009      	add	sp, #36	; 0x24
 80a1020:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1022 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1022:	2200      	movs	r2, #0
 80a1024:	4611      	mov	r1, r2
 80a1026:	6840      	ldr	r0, [r0, #4]
 80a1028:	f7ff ba9c 	b.w	80a0564 <network_listening>

080a102c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a102c:	2200      	movs	r2, #0
 80a102e:	4611      	mov	r1, r2
 80a1030:	6840      	ldr	r0, [r0, #4]
 80a1032:	f7ff baa7 	b.w	80a0584 <network_get_listen_timeout>

080a1036 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1036:	2200      	movs	r2, #0
 80a1038:	6840      	ldr	r0, [r0, #4]
 80a103a:	f7ff ba9b 	b.w	80a0574 <network_set_listen_timeout>

080a103e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a103e:	2200      	movs	r2, #0
 80a1040:	f081 0101 	eor.w	r1, r1, #1
 80a1044:	6840      	ldr	r0, [r0, #4]
 80a1046:	f7ff ba85 	b.w	80a0554 <network_listen>

080a104a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a104a:	2300      	movs	r3, #0
 80a104c:	461a      	mov	r2, r3
 80a104e:	4619      	mov	r1, r3
 80a1050:	6840      	ldr	r0, [r0, #4]
 80a1052:	f7ff ba77 	b.w	80a0544 <network_off>

080a1056 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1056:	2300      	movs	r3, #0
 80a1058:	461a      	mov	r2, r3
 80a105a:	4619      	mov	r1, r3
 80a105c:	6840      	ldr	r0, [r0, #4]
 80a105e:	f7ff ba69 	b.w	80a0534 <network_on>

080a1062 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1062:	2200      	movs	r2, #0
 80a1064:	4611      	mov	r1, r2
 80a1066:	6840      	ldr	r0, [r0, #4]
 80a1068:	f7ff ba4c 	b.w	80a0504 <network_connecting>

080a106c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a106c:	2200      	movs	r2, #0
 80a106e:	2102      	movs	r1, #2
 80a1070:	6840      	ldr	r0, [r0, #4]
 80a1072:	f7ff ba4f 	b.w	80a0514 <network_disconnect>

080a1076 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1076:	2300      	movs	r3, #0
 80a1078:	461a      	mov	r2, r3
 80a107a:	6840      	ldr	r0, [r0, #4]
 80a107c:	f7ff ba3a 	b.w	80a04f4 <network_connect>

080a1080 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1080:	4b02      	ldr	r3, [pc, #8]	; (80a108c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1082:	2204      	movs	r2, #4
 80a1084:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1086:	4a02      	ldr	r2, [pc, #8]	; (80a1090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1088:	601a      	str	r2, [r3, #0]
 80a108a:	4770      	bx	lr
 80a108c:	20000634 	.word	0x20000634
 80a1090:	080a1874 	.word	0x080a1874

080a1094 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1094:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1096:	4b14      	ldr	r3, [pc, #80]	; (80a10e8 <serialEventRun+0x54>)
 80a1098:	b133      	cbz	r3, 80a10a8 <serialEventRun+0x14>
 80a109a:	f7ff ff39 	bl	80a0f10 <_Z16_fetch_usbserialv>
 80a109e:	6803      	ldr	r3, [r0, #0]
 80a10a0:	691b      	ldr	r3, [r3, #16]
 80a10a2:	4798      	blx	r3
 80a10a4:	2800      	cmp	r0, #0
 80a10a6:	dc16      	bgt.n	80a10d6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a10a8:	4b10      	ldr	r3, [pc, #64]	; (80a10ec <serialEventRun+0x58>)
 80a10aa:	b133      	cbz	r3, 80a10ba <serialEventRun+0x26>
 80a10ac:	f7ff fe94 	bl	80a0dd8 <_Z22__fetch_global_Serial1v>
 80a10b0:	6803      	ldr	r3, [r0, #0]
 80a10b2:	691b      	ldr	r3, [r3, #16]
 80a10b4:	4798      	blx	r3
 80a10b6:	2800      	cmp	r0, #0
 80a10b8:	dc10      	bgt.n	80a10dc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a10ba:	4b0d      	ldr	r3, [pc, #52]	; (80a10f0 <serialEventRun+0x5c>)
 80a10bc:	b10b      	cbz	r3, 80a10c2 <serialEventRun+0x2e>
 80a10be:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a10c2:	4b0c      	ldr	r3, [pc, #48]	; (80a10f4 <serialEventRun+0x60>)
 80a10c4:	b17b      	cbz	r3, 80a10e6 <serialEventRun+0x52>
 80a10c6:	f7ff ff5f 	bl	80a0f88 <_Z17_fetch_usbserial1v>
 80a10ca:	6803      	ldr	r3, [r0, #0]
 80a10cc:	691b      	ldr	r3, [r3, #16]
 80a10ce:	4798      	blx	r3
 80a10d0:	2800      	cmp	r0, #0
 80a10d2:	dc06      	bgt.n	80a10e2 <serialEventRun+0x4e>
 80a10d4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a10d6:	f3af 8000 	nop.w
 80a10da:	e7e5      	b.n	80a10a8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a10dc:	f3af 8000 	nop.w
 80a10e0:	e7eb      	b.n	80a10ba <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a10e2:	f3af 8000 	nop.w
 80a10e6:	bd08      	pop	{r3, pc}
	...

080a10f8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a10f8:	b508      	push	{r3, lr}
	serialEventRun();
 80a10fa:	f7ff ffcb 	bl	80a1094 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a10fe:	f7ff f8f5 	bl	80a02ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1102:	4b01      	ldr	r3, [pc, #4]	; (80a1108 <_post_loop+0x10>)
 80a1104:	6018      	str	r0, [r3, #0]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	20000644 	.word	0x20000644

080a110c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a110c:	4802      	ldr	r0, [pc, #8]	; (80a1118 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a110e:	4a03      	ldr	r2, [pc, #12]	; (80a111c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1110:	4903      	ldr	r1, [pc, #12]	; (80a1120 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1112:	1a12      	subs	r2, r2, r0
 80a1114:	f000 b9f2 	b.w	80a14fc <memcpy>
 80a1118:	40024000 	.word	0x40024000
 80a111c:	40024004 	.word	0x40024004
 80a1120:	080a1940 	.word	0x080a1940

080a1124 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1124:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1126:	2300      	movs	r3, #0
 80a1128:	9300      	str	r3, [sp, #0]
 80a112a:	461a      	mov	r2, r3
 80a112c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1130:	f7ff f9c6 	bl	80a04c0 <system_ctrl_set_result>
}
 80a1134:	b003      	add	sp, #12
 80a1136:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a113c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a113c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a113e:	8843      	ldrh	r3, [r0, #2]
 80a1140:	2b0a      	cmp	r3, #10
 80a1142:	d008      	beq.n	80a1156 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1144:	2b50      	cmp	r3, #80	; 0x50
 80a1146:	d109      	bne.n	80a115c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1148:	4b09      	ldr	r3, [pc, #36]	; (80a1170 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a114a:	681b      	ldr	r3, [r3, #0]
 80a114c:	b13b      	cbz	r3, 80a115e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a114e:	b003      	add	sp, #12
 80a1150:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1154:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1156:	f7ff ffe5 	bl	80a1124 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a115a:	e006      	b.n	80a116a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a115c:	2300      	movs	r3, #0
 80a115e:	9300      	str	r3, [sp, #0]
 80a1160:	461a      	mov	r2, r3
 80a1162:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1166:	f7ff f9ab 	bl	80a04c0 <system_ctrl_set_result>
        break;
    }
}
 80a116a:	b003      	add	sp, #12
 80a116c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1170:	2000063c 	.word	0x2000063c

080a1174 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1174:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1176:	4c10      	ldr	r4, [pc, #64]	; (80a11b8 <module_user_init_hook+0x44>)
 80a1178:	4d10      	ldr	r5, [pc, #64]	; (80a11bc <module_user_init_hook+0x48>)
 80a117a:	6823      	ldr	r3, [r4, #0]
 80a117c:	42ab      	cmp	r3, r5
 80a117e:	4b10      	ldr	r3, [pc, #64]	; (80a11c0 <module_user_init_hook+0x4c>)
 80a1180:	bf0c      	ite	eq
 80a1182:	2201      	moveq	r2, #1
 80a1184:	2200      	movne	r2, #0
 80a1186:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1188:	d002      	beq.n	80a1190 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a118a:	f7ff ffbf 	bl	80a110c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a118e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1190:	f7ff f8a4 	bl	80a02dc <HAL_RNG_GetRandomNumber>
 80a1194:	4604      	mov	r4, r0
    srand(seed);
 80a1196:	f000 f9c5 	bl	80a1524 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a119a:	4b0a      	ldr	r3, [pc, #40]	; (80a11c4 <module_user_init_hook+0x50>)
 80a119c:	b113      	cbz	r3, 80a11a4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a119e:	4620      	mov	r0, r4
 80a11a0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a11a4:	2100      	movs	r1, #0
 80a11a6:	4807      	ldr	r0, [pc, #28]	; (80a11c4 <module_user_init_hook+0x50>)
 80a11a8:	f7ff f994 	bl	80a04d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a11ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a11b0:	2100      	movs	r1, #0
 80a11b2:	4805      	ldr	r0, [pc, #20]	; (80a11c8 <module_user_init_hook+0x54>)
 80a11b4:	f7ff b97a 	b.w	80a04ac <system_ctrl_set_app_request_handler>
 80a11b8:	40024000 	.word	0x40024000
 80a11bc:	9a271c1e 	.word	0x9a271c1e
 80a11c0:	20000640 	.word	0x20000640
 80a11c4:	00000000 	.word	0x00000000
 80a11c8:	080a113d 	.word	0x080a113d

080a11cc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a11cc:	b513      	push	{r0, r1, r4, lr}
 80a11ce:	4c08      	ldr	r4, [pc, #32]	; (80a11f0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a11d0:	2300      	movs	r3, #0
 80a11d2:	461a      	mov	r2, r3
 80a11d4:	4619      	mov	r1, r3
 80a11d6:	9300      	str	r3, [sp, #0]
 80a11d8:	4620      	mov	r0, r4
 80a11da:	f7ff fa4f 	bl	80a067c <_ZN9IPAddressC1Ehhhh>
 80a11de:	4620      	mov	r0, r4
 80a11e0:	4a04      	ldr	r2, [pc, #16]	; (80a11f4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a11e2:	4905      	ldr	r1, [pc, #20]	; (80a11f8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a11e4:	b002      	add	sp, #8
 80a11e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a11ea:	f000 b829 	b.w	80a1240 <__aeabi_atexit>
 80a11ee:	bf00      	nop
 80a11f0:	20000648 	.word	0x20000648
 80a11f4:	20000074 	.word	0x20000074
 80a11f8:	080a00b3 	.word	0x080a00b3

080a11fc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a11fc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a11fe:	4c0c      	ldr	r4, [pc, #48]	; (80a1230 <_GLOBAL__sub_I_SPI+0x34>)
 80a1200:	4e0c      	ldr	r6, [pc, #48]	; (80a1234 <_GLOBAL__sub_I_SPI+0x38>)
 80a1202:	4d0d      	ldr	r5, [pc, #52]	; (80a1238 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1204:	2100      	movs	r1, #0
 80a1206:	4620      	mov	r0, r4
 80a1208:	f7ff fb62 	bl	80a08d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a120c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a120e:	4c0b      	ldr	r4, [pc, #44]	; (80a123c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1210:	4632      	mov	r2, r6
 80a1212:	4629      	mov	r1, r5
 80a1214:	f000 f814 	bl	80a1240 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1218:	2101      	movs	r1, #1
 80a121a:	4620      	mov	r0, r4
 80a121c:	f7ff fb58 	bl	80a08d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1220:	4632      	mov	r2, r6
 80a1222:	4629      	mov	r1, r5
 80a1224:	4620      	mov	r0, r4
 80a1226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a122a:	f000 b809 	b.w	80a1240 <__aeabi_atexit>
 80a122e:	bf00      	nop
 80a1230:	20000660 	.word	0x20000660
 80a1234:	20000074 	.word	0x20000074
 80a1238:	080a08c1 	.word	0x080a08c1
 80a123c:	20000670 	.word	0x20000670

080a1240 <__aeabi_atexit>:
 80a1240:	460b      	mov	r3, r1
 80a1242:	4601      	mov	r1, r0
 80a1244:	4618      	mov	r0, r3
 80a1246:	f000 b94b 	b.w	80a14e0 <__cxa_atexit>

080a124a <_ZdlPvj>:
 80a124a:	f7fe bf28 	b.w	80a009e <_ZdlPv>
	...

080a1250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1250:	4b24      	ldr	r3, [pc, #144]	; (80a12e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1252:	681a      	ldr	r2, [r3, #0]
 80a1254:	07d0      	lsls	r0, r2, #31
 80a1256:	bf5c      	itt	pl
 80a1258:	2201      	movpl	r2, #1
 80a125a:	601a      	strpl	r2, [r3, #0]
 80a125c:	4b22      	ldr	r3, [pc, #136]	; (80a12e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a125e:	681a      	ldr	r2, [r3, #0]
 80a1260:	07d1      	lsls	r1, r2, #31
 80a1262:	bf5c      	itt	pl
 80a1264:	2201      	movpl	r2, #1
 80a1266:	601a      	strpl	r2, [r3, #0]
 80a1268:	4b20      	ldr	r3, [pc, #128]	; (80a12ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a126a:	681a      	ldr	r2, [r3, #0]
 80a126c:	07d2      	lsls	r2, r2, #31
 80a126e:	bf5c      	itt	pl
 80a1270:	2201      	movpl	r2, #1
 80a1272:	601a      	strpl	r2, [r3, #0]
 80a1274:	4b1e      	ldr	r3, [pc, #120]	; (80a12f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1276:	681a      	ldr	r2, [r3, #0]
 80a1278:	07d0      	lsls	r0, r2, #31
 80a127a:	bf5c      	itt	pl
 80a127c:	2201      	movpl	r2, #1
 80a127e:	601a      	strpl	r2, [r3, #0]
 80a1280:	4b1c      	ldr	r3, [pc, #112]	; (80a12f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1282:	681a      	ldr	r2, [r3, #0]
 80a1284:	07d1      	lsls	r1, r2, #31
 80a1286:	bf5c      	itt	pl
 80a1288:	2201      	movpl	r2, #1
 80a128a:	601a      	strpl	r2, [r3, #0]
 80a128c:	4b1a      	ldr	r3, [pc, #104]	; (80a12f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a128e:	681a      	ldr	r2, [r3, #0]
 80a1290:	07d2      	lsls	r2, r2, #31
 80a1292:	bf5c      	itt	pl
 80a1294:	2201      	movpl	r2, #1
 80a1296:	601a      	strpl	r2, [r3, #0]
 80a1298:	4b18      	ldr	r3, [pc, #96]	; (80a12fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a129a:	681a      	ldr	r2, [r3, #0]
 80a129c:	07d0      	lsls	r0, r2, #31
 80a129e:	bf5c      	itt	pl
 80a12a0:	2201      	movpl	r2, #1
 80a12a2:	601a      	strpl	r2, [r3, #0]
 80a12a4:	4b16      	ldr	r3, [pc, #88]	; (80a1300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a12a6:	681a      	ldr	r2, [r3, #0]
 80a12a8:	07d1      	lsls	r1, r2, #31
 80a12aa:	bf5c      	itt	pl
 80a12ac:	2201      	movpl	r2, #1
 80a12ae:	601a      	strpl	r2, [r3, #0]
 80a12b0:	4b14      	ldr	r3, [pc, #80]	; (80a1304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a12b2:	681a      	ldr	r2, [r3, #0]
 80a12b4:	07d2      	lsls	r2, r2, #31
 80a12b6:	bf5c      	itt	pl
 80a12b8:	2201      	movpl	r2, #1
 80a12ba:	601a      	strpl	r2, [r3, #0]
 80a12bc:	4b12      	ldr	r3, [pc, #72]	; (80a1308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a12be:	681a      	ldr	r2, [r3, #0]
 80a12c0:	07d0      	lsls	r0, r2, #31
 80a12c2:	bf5c      	itt	pl
 80a12c4:	2201      	movpl	r2, #1
 80a12c6:	601a      	strpl	r2, [r3, #0]
 80a12c8:	4b10      	ldr	r3, [pc, #64]	; (80a130c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a12ca:	681a      	ldr	r2, [r3, #0]
 80a12cc:	07d1      	lsls	r1, r2, #31
 80a12ce:	bf5c      	itt	pl
 80a12d0:	2201      	movpl	r2, #1
 80a12d2:	601a      	strpl	r2, [r3, #0]
 80a12d4:	4b0e      	ldr	r3, [pc, #56]	; (80a1310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a12d6:	681a      	ldr	r2, [r3, #0]
 80a12d8:	07d2      	lsls	r2, r2, #31
 80a12da:	bf5c      	itt	pl
 80a12dc:	2201      	movpl	r2, #1
 80a12de:	601a      	strpl	r2, [r3, #0]
 80a12e0:	4770      	bx	lr
 80a12e2:	bf00      	nop
 80a12e4:	200006ac 	.word	0x200006ac
 80a12e8:	200006a8 	.word	0x200006a8
 80a12ec:	200006a4 	.word	0x200006a4
 80a12f0:	200006a0 	.word	0x200006a0
 80a12f4:	2000069c 	.word	0x2000069c
 80a12f8:	20000698 	.word	0x20000698
 80a12fc:	20000694 	.word	0x20000694
 80a1300:	20000690 	.word	0x20000690
 80a1304:	2000068c 	.word	0x2000068c
 80a1308:	20000688 	.word	0x20000688
 80a130c:	20000684 	.word	0x20000684
 80a1310:	20000680 	.word	0x20000680

080a1314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1314:	4b18      	ldr	r3, [pc, #96]	; (80a1378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1316:	681a      	ldr	r2, [r3, #0]
 80a1318:	07d1      	lsls	r1, r2, #31
 80a131a:	bf5c      	itt	pl
 80a131c:	2201      	movpl	r2, #1
 80a131e:	601a      	strpl	r2, [r3, #0]
 80a1320:	4b16      	ldr	r3, [pc, #88]	; (80a137c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1322:	681a      	ldr	r2, [r3, #0]
 80a1324:	07d2      	lsls	r2, r2, #31
 80a1326:	bf5c      	itt	pl
 80a1328:	2201      	movpl	r2, #1
 80a132a:	601a      	strpl	r2, [r3, #0]
 80a132c:	4b14      	ldr	r3, [pc, #80]	; (80a1380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a132e:	681a      	ldr	r2, [r3, #0]
 80a1330:	07d0      	lsls	r0, r2, #31
 80a1332:	bf5c      	itt	pl
 80a1334:	2201      	movpl	r2, #1
 80a1336:	601a      	strpl	r2, [r3, #0]
 80a1338:	4b12      	ldr	r3, [pc, #72]	; (80a1384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a133a:	681a      	ldr	r2, [r3, #0]
 80a133c:	07d1      	lsls	r1, r2, #31
 80a133e:	bf5c      	itt	pl
 80a1340:	2201      	movpl	r2, #1
 80a1342:	601a      	strpl	r2, [r3, #0]
 80a1344:	4b10      	ldr	r3, [pc, #64]	; (80a1388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1346:	681a      	ldr	r2, [r3, #0]
 80a1348:	07d2      	lsls	r2, r2, #31
 80a134a:	bf5c      	itt	pl
 80a134c:	2201      	movpl	r2, #1
 80a134e:	601a      	strpl	r2, [r3, #0]
 80a1350:	4b0e      	ldr	r3, [pc, #56]	; (80a138c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1352:	681a      	ldr	r2, [r3, #0]
 80a1354:	07d0      	lsls	r0, r2, #31
 80a1356:	bf5c      	itt	pl
 80a1358:	2201      	movpl	r2, #1
 80a135a:	601a      	strpl	r2, [r3, #0]
 80a135c:	4b0c      	ldr	r3, [pc, #48]	; (80a1390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a135e:	681a      	ldr	r2, [r3, #0]
 80a1360:	07d1      	lsls	r1, r2, #31
 80a1362:	bf5c      	itt	pl
 80a1364:	2201      	movpl	r2, #1
 80a1366:	601a      	strpl	r2, [r3, #0]
 80a1368:	4b0a      	ldr	r3, [pc, #40]	; (80a1394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a136a:	681a      	ldr	r2, [r3, #0]
 80a136c:	07d2      	lsls	r2, r2, #31
 80a136e:	bf5c      	itt	pl
 80a1370:	2201      	movpl	r2, #1
 80a1372:	601a      	strpl	r2, [r3, #0]
 80a1374:	4770      	bx	lr
 80a1376:	bf00      	nop
 80a1378:	200006cc 	.word	0x200006cc
 80a137c:	200006c8 	.word	0x200006c8
 80a1380:	200006c4 	.word	0x200006c4
 80a1384:	200006c0 	.word	0x200006c0
 80a1388:	200006bc 	.word	0x200006bc
 80a138c:	200006b8 	.word	0x200006b8
 80a1390:	200006b4 	.word	0x200006b4
 80a1394:	200006b0 	.word	0x200006b0

080a1398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1398:	4b18      	ldr	r3, [pc, #96]	; (80a13fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a139a:	681a      	ldr	r2, [r3, #0]
 80a139c:	07d1      	lsls	r1, r2, #31
 80a139e:	bf5c      	itt	pl
 80a13a0:	2201      	movpl	r2, #1
 80a13a2:	601a      	strpl	r2, [r3, #0]
 80a13a4:	4b16      	ldr	r3, [pc, #88]	; (80a1400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a13a6:	681a      	ldr	r2, [r3, #0]
 80a13a8:	07d2      	lsls	r2, r2, #31
 80a13aa:	bf5c      	itt	pl
 80a13ac:	2201      	movpl	r2, #1
 80a13ae:	601a      	strpl	r2, [r3, #0]
 80a13b0:	4b14      	ldr	r3, [pc, #80]	; (80a1404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a13b2:	681a      	ldr	r2, [r3, #0]
 80a13b4:	07d0      	lsls	r0, r2, #31
 80a13b6:	bf5c      	itt	pl
 80a13b8:	2201      	movpl	r2, #1
 80a13ba:	601a      	strpl	r2, [r3, #0]
 80a13bc:	4b12      	ldr	r3, [pc, #72]	; (80a1408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a13be:	681a      	ldr	r2, [r3, #0]
 80a13c0:	07d1      	lsls	r1, r2, #31
 80a13c2:	bf5c      	itt	pl
 80a13c4:	2201      	movpl	r2, #1
 80a13c6:	601a      	strpl	r2, [r3, #0]
 80a13c8:	4b10      	ldr	r3, [pc, #64]	; (80a140c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a13ca:	681a      	ldr	r2, [r3, #0]
 80a13cc:	07d2      	lsls	r2, r2, #31
 80a13ce:	bf5c      	itt	pl
 80a13d0:	2201      	movpl	r2, #1
 80a13d2:	601a      	strpl	r2, [r3, #0]
 80a13d4:	4b0e      	ldr	r3, [pc, #56]	; (80a1410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a13d6:	681a      	ldr	r2, [r3, #0]
 80a13d8:	07d0      	lsls	r0, r2, #31
 80a13da:	bf5c      	itt	pl
 80a13dc:	2201      	movpl	r2, #1
 80a13de:	601a      	strpl	r2, [r3, #0]
 80a13e0:	4b0c      	ldr	r3, [pc, #48]	; (80a1414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a13e2:	681a      	ldr	r2, [r3, #0]
 80a13e4:	07d1      	lsls	r1, r2, #31
 80a13e6:	bf5c      	itt	pl
 80a13e8:	2201      	movpl	r2, #1
 80a13ea:	601a      	strpl	r2, [r3, #0]
 80a13ec:	4b0a      	ldr	r3, [pc, #40]	; (80a1418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a13ee:	681a      	ldr	r2, [r3, #0]
 80a13f0:	07d2      	lsls	r2, r2, #31
 80a13f2:	bf5c      	itt	pl
 80a13f4:	2201      	movpl	r2, #1
 80a13f6:	601a      	strpl	r2, [r3, #0]
 80a13f8:	4770      	bx	lr
 80a13fa:	bf00      	nop
 80a13fc:	200006ec 	.word	0x200006ec
 80a1400:	200006e8 	.word	0x200006e8
 80a1404:	200006e4 	.word	0x200006e4
 80a1408:	200006e0 	.word	0x200006e0
 80a140c:	200006dc 	.word	0x200006dc
 80a1410:	200006d8 	.word	0x200006d8
 80a1414:	200006d4 	.word	0x200006d4
 80a1418:	200006d0 	.word	0x200006d0

080a141c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a141c:	4b24      	ldr	r3, [pc, #144]	; (80a14b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a141e:	681a      	ldr	r2, [r3, #0]
 80a1420:	07d0      	lsls	r0, r2, #31
 80a1422:	bf5c      	itt	pl
 80a1424:	2201      	movpl	r2, #1
 80a1426:	601a      	strpl	r2, [r3, #0]
 80a1428:	4b22      	ldr	r3, [pc, #136]	; (80a14b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a142a:	681a      	ldr	r2, [r3, #0]
 80a142c:	07d1      	lsls	r1, r2, #31
 80a142e:	bf5c      	itt	pl
 80a1430:	2201      	movpl	r2, #1
 80a1432:	601a      	strpl	r2, [r3, #0]
 80a1434:	4b20      	ldr	r3, [pc, #128]	; (80a14b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1436:	681a      	ldr	r2, [r3, #0]
 80a1438:	07d2      	lsls	r2, r2, #31
 80a143a:	bf5c      	itt	pl
 80a143c:	2201      	movpl	r2, #1
 80a143e:	601a      	strpl	r2, [r3, #0]
 80a1440:	4b1e      	ldr	r3, [pc, #120]	; (80a14bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1442:	681a      	ldr	r2, [r3, #0]
 80a1444:	07d0      	lsls	r0, r2, #31
 80a1446:	bf5c      	itt	pl
 80a1448:	2201      	movpl	r2, #1
 80a144a:	601a      	strpl	r2, [r3, #0]
 80a144c:	4b1c      	ldr	r3, [pc, #112]	; (80a14c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a144e:	681a      	ldr	r2, [r3, #0]
 80a1450:	07d1      	lsls	r1, r2, #31
 80a1452:	bf5c      	itt	pl
 80a1454:	2201      	movpl	r2, #1
 80a1456:	601a      	strpl	r2, [r3, #0]
 80a1458:	4b1a      	ldr	r3, [pc, #104]	; (80a14c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a145a:	681a      	ldr	r2, [r3, #0]
 80a145c:	07d2      	lsls	r2, r2, #31
 80a145e:	bf5c      	itt	pl
 80a1460:	2201      	movpl	r2, #1
 80a1462:	601a      	strpl	r2, [r3, #0]
 80a1464:	4b18      	ldr	r3, [pc, #96]	; (80a14c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1466:	681a      	ldr	r2, [r3, #0]
 80a1468:	07d0      	lsls	r0, r2, #31
 80a146a:	bf5c      	itt	pl
 80a146c:	2201      	movpl	r2, #1
 80a146e:	601a      	strpl	r2, [r3, #0]
 80a1470:	4b16      	ldr	r3, [pc, #88]	; (80a14cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1472:	681a      	ldr	r2, [r3, #0]
 80a1474:	07d1      	lsls	r1, r2, #31
 80a1476:	bf5c      	itt	pl
 80a1478:	2201      	movpl	r2, #1
 80a147a:	601a      	strpl	r2, [r3, #0]
 80a147c:	4b14      	ldr	r3, [pc, #80]	; (80a14d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a147e:	681a      	ldr	r2, [r3, #0]
 80a1480:	07d2      	lsls	r2, r2, #31
 80a1482:	bf5c      	itt	pl
 80a1484:	2201      	movpl	r2, #1
 80a1486:	601a      	strpl	r2, [r3, #0]
 80a1488:	4b12      	ldr	r3, [pc, #72]	; (80a14d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a148a:	681a      	ldr	r2, [r3, #0]
 80a148c:	07d0      	lsls	r0, r2, #31
 80a148e:	bf5c      	itt	pl
 80a1490:	2201      	movpl	r2, #1
 80a1492:	601a      	strpl	r2, [r3, #0]
 80a1494:	4b10      	ldr	r3, [pc, #64]	; (80a14d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1496:	681a      	ldr	r2, [r3, #0]
 80a1498:	07d1      	lsls	r1, r2, #31
 80a149a:	bf5c      	itt	pl
 80a149c:	2201      	movpl	r2, #1
 80a149e:	601a      	strpl	r2, [r3, #0]
 80a14a0:	4b0e      	ldr	r3, [pc, #56]	; (80a14dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a14a2:	681a      	ldr	r2, [r3, #0]
 80a14a4:	07d2      	lsls	r2, r2, #31
 80a14a6:	bf5c      	itt	pl
 80a14a8:	2201      	movpl	r2, #1
 80a14aa:	601a      	strpl	r2, [r3, #0]
 80a14ac:	4770      	bx	lr
 80a14ae:	bf00      	nop
 80a14b0:	2000071c 	.word	0x2000071c
 80a14b4:	20000718 	.word	0x20000718
 80a14b8:	20000714 	.word	0x20000714
 80a14bc:	20000710 	.word	0x20000710
 80a14c0:	2000070c 	.word	0x2000070c
 80a14c4:	20000708 	.word	0x20000708
 80a14c8:	20000704 	.word	0x20000704
 80a14cc:	20000700 	.word	0x20000700
 80a14d0:	200006fc 	.word	0x200006fc
 80a14d4:	200006f8 	.word	0x200006f8
 80a14d8:	200006f4 	.word	0x200006f4
 80a14dc:	200006f0 	.word	0x200006f0

080a14e0 <__cxa_atexit>:
 80a14e0:	b510      	push	{r4, lr}
 80a14e2:	4c05      	ldr	r4, [pc, #20]	; (80a14f8 <__cxa_atexit+0x18>)
 80a14e4:	4613      	mov	r3, r2
 80a14e6:	b12c      	cbz	r4, 80a14f4 <__cxa_atexit+0x14>
 80a14e8:	460a      	mov	r2, r1
 80a14ea:	4601      	mov	r1, r0
 80a14ec:	2002      	movs	r0, #2
 80a14ee:	f3af 8000 	nop.w
 80a14f2:	bd10      	pop	{r4, pc}
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	bd10      	pop	{r4, pc}
 80a14f8:	00000000 	.word	0x00000000

080a14fc <memcpy>:
 80a14fc:	b510      	push	{r4, lr}
 80a14fe:	1e43      	subs	r3, r0, #1
 80a1500:	440a      	add	r2, r1
 80a1502:	4291      	cmp	r1, r2
 80a1504:	d004      	beq.n	80a1510 <memcpy+0x14>
 80a1506:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a150a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a150e:	e7f8      	b.n	80a1502 <memcpy+0x6>
 80a1510:	bd10      	pop	{r4, pc}

080a1512 <memset>:
 80a1512:	4603      	mov	r3, r0
 80a1514:	4402      	add	r2, r0
 80a1516:	4293      	cmp	r3, r2
 80a1518:	d002      	beq.n	80a1520 <memset+0xe>
 80a151a:	f803 1b01 	strb.w	r1, [r3], #1
 80a151e:	e7fa      	b.n	80a1516 <memset+0x4>
 80a1520:	4770      	bx	lr
	...

080a1524 <srand>:
 80a1524:	b538      	push	{r3, r4, r5, lr}
 80a1526:	4b12      	ldr	r3, [pc, #72]	; (80a1570 <srand+0x4c>)
 80a1528:	4605      	mov	r5, r0
 80a152a:	681c      	ldr	r4, [r3, #0]
 80a152c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a152e:	b9d3      	cbnz	r3, 80a1566 <srand+0x42>
 80a1530:	2018      	movs	r0, #24
 80a1532:	f7ff f82f 	bl	80a0594 <malloc>
 80a1536:	f243 330e 	movw	r3, #13070	; 0x330e
 80a153a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a153c:	8003      	strh	r3, [r0, #0]
 80a153e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1542:	8043      	strh	r3, [r0, #2]
 80a1544:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1548:	8083      	strh	r3, [r0, #4]
 80a154a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a154e:	80c3      	strh	r3, [r0, #6]
 80a1550:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1554:	8103      	strh	r3, [r0, #8]
 80a1556:	2305      	movs	r3, #5
 80a1558:	8143      	strh	r3, [r0, #10]
 80a155a:	230b      	movs	r3, #11
 80a155c:	8183      	strh	r3, [r0, #12]
 80a155e:	2201      	movs	r2, #1
 80a1560:	2300      	movs	r3, #0
 80a1562:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1568:	2200      	movs	r2, #0
 80a156a:	611d      	str	r5, [r3, #16]
 80a156c:	615a      	str	r2, [r3, #20]
 80a156e:	bd38      	pop	{r3, r4, r5, pc}
 80a1570:	20000070 	.word	0x20000070

080a1574 <rand>:
 80a1574:	4b19      	ldr	r3, [pc, #100]	; (80a15dc <rand+0x68>)
 80a1576:	b510      	push	{r4, lr}
 80a1578:	681c      	ldr	r4, [r3, #0]
 80a157a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a157c:	b9d3      	cbnz	r3, 80a15b4 <rand+0x40>
 80a157e:	2018      	movs	r0, #24
 80a1580:	f7ff f808 	bl	80a0594 <malloc>
 80a1584:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1588:	63a0      	str	r0, [r4, #56]	; 0x38
 80a158a:	8003      	strh	r3, [r0, #0]
 80a158c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1590:	8043      	strh	r3, [r0, #2]
 80a1592:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1596:	8083      	strh	r3, [r0, #4]
 80a1598:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a159c:	80c3      	strh	r3, [r0, #6]
 80a159e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a15a2:	8103      	strh	r3, [r0, #8]
 80a15a4:	2305      	movs	r3, #5
 80a15a6:	8143      	strh	r3, [r0, #10]
 80a15a8:	230b      	movs	r3, #11
 80a15aa:	8183      	strh	r3, [r0, #12]
 80a15ac:	2201      	movs	r2, #1
 80a15ae:	2300      	movs	r3, #0
 80a15b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a15b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a15b6:	4c0a      	ldr	r4, [pc, #40]	; (80a15e0 <rand+0x6c>)
 80a15b8:	690b      	ldr	r3, [r1, #16]
 80a15ba:	6948      	ldr	r0, [r1, #20]
 80a15bc:	435c      	muls	r4, r3
 80a15be:	4a09      	ldr	r2, [pc, #36]	; (80a15e4 <rand+0x70>)
 80a15c0:	fb02 4000 	mla	r0, r2, r0, r4
 80a15c4:	fba3 2302 	umull	r2, r3, r3, r2
 80a15c8:	3201      	adds	r2, #1
 80a15ca:	4403      	add	r3, r0
 80a15cc:	f143 0300 	adc.w	r3, r3, #0
 80a15d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a15d4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a15d8:	bd10      	pop	{r4, pc}
 80a15da:	bf00      	nop
 80a15dc:	20000070 	.word	0x20000070
 80a15e0:	5851f42d 	.word	0x5851f42d
 80a15e4:	4c957f2d 	.word	0x4c957f2d

080a15e8 <strlen>:
 80a15e8:	4603      	mov	r3, r0
 80a15ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a15ee:	2a00      	cmp	r2, #0
 80a15f0:	d1fb      	bne.n	80a15ea <strlen+0x2>
 80a15f2:	1a18      	subs	r0, r3, r0
 80a15f4:	3801      	subs	r0, #1
 80a15f6:	4770      	bx	lr

080a15f8 <dynalib_user>:
 80a15f8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1608:	0000 0000 6574 7473 7420 6568 7320 7265     ....test the ser
 80a1618:	6169 216c 7300 6174 7472 252c 2c73 6425     ial!.start,%s,%d
 80a1628:	252c 2c64 6425 652c 646e 0000               ,%d,%d,end..

080a1634 <_ZTV9IPAddress>:
	...
 80a163c:	05dd 080a 00b3 080a 00d5 080a 6162 6475     ............baud
 80a164c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a165c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a166c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a167c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a168c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a169c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a16ac:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a16bc:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a16cc:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a16dc:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a16ec:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a16fc:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a170c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a171c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a172c <_ZTVN5spark12NetworkClassE>:
	...
 80a1734:	06bd 080a 06c7 080a 06d1 080a 06db 080a     ................
 80a1744:	06e5 080a 06f1 080a 06fd 080a 0709 080a     ................
 80a1754:	0711 080a 071b 080a 0725 080a               ........%...

080a1760 <_ZTV8SPIClass>:
	...
 80a1768:	08c1 080a 08c3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1778:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1788:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1798:	0000 0000                                   ....

080a179c <_ZTV3UDP>:
	...
 80a17a4:	00b5 080a 00e3 080a 0943 080a 0a63 080a     ........C...c...
 80a17b4:	093b 080a 0959 080a 0977 080a 0991 080a     ;...Y...w.......
 80a17c4:	09b3 080a 09fd 080a 0a1f 080a 0bb5 080a     ................
 80a17d4:	0ac9 080a 0925 080a 0cc5 080a 0b31 080a     ....%.......1...
 80a17e4:	0bed 080a 0cf3 080a 0a8d 080a 0931 080a     ............1...
 80a17f4:	0b95 080a 0937 080a 0993 080a fff0 ffff     ....7...........
 80a1804:	0000 0000 09ab 080a                         ........

080a180c <_ZTV11USARTSerial>:
	...
 80a1814:	0d2b 080a 0d7b 080a 0d89 080a 07a1 080a     +...{...........
 80a1824:	0d3f 080a 0d61 080a 0d4d 080a 0d75 080a     ?...a...M...u...
 80a1834:	0d2d 080a 0d31 080a                         -...1...

080a183c <_ZTV9USBSerial>:
	...
 80a1844:	0e29 080a 0e79 080a 0e87 080a 07a1 080a     )...y...........
 80a1854:	0e65 080a 0e2b 080a 0e41 080a 0e73 080a     e...+...A...s...
 80a1864:	0e57 080a 0e25 080a                         W...%...

080a186c <_ZTVN5spark9WiFiClassE>:
	...
 80a1874:	1077 080a 106d 080a 1063 080a 0fd5 080a     w...m...c.......
 80a1884:	1057 080a 104b 080a 103f 080a 1037 080a     W...K...?...7...
 80a1894:	102d 080a 1023 080a 0fdf 080a               -...#.......

080a18a0 <__sf_fake_stdin>:
	...

080a18c0 <__sf_fake_stdout>:
	...

080a18e0 <__sf_fake_stderr>:
	...
 80a1900:	0043                                        C.

080a1902 <link_const_variable_data_end>:
	...

080a1904 <link_constructors_location>:
 80a1904:	080a025d 	.word	0x080a025d
 80a1908:	080a06ad 	.word	0x080a06ad
 80a190c:	080a078d 	.word	0x080a078d
 80a1910:	080a08a5 	.word	0x080a08a5
 80a1914:	080a08f9 	.word	0x080a08f9
 80a1918:	080a0911 	.word	0x080a0911
 80a191c:	080a1081 	.word	0x080a1081
 80a1920:	080a11cd 	.word	0x080a11cd
 80a1924:	080a11fd 	.word	0x080a11fd
 80a1928:	080a1251 	.word	0x080a1251
 80a192c:	080a1315 	.word	0x080a1315
 80a1930:	080a1399 	.word	0x080a1399
 80a1934:	080a141d 	.word	0x080a141d

080a1938 <link_constructors_end>:
	...
